

Supposedly Java 8 is getting a next gen code generation facility that
allows actual AST modifications (where as annotation processors can
only create new .java files, not change the bytecode for existing ones):

http://techbitsfromsridhar.blogspot.com/2013/02/java-compiler-plug-ins-in-java-8-use.html

Could be pretty interesting, but for now it's all `com.sun.*` stuff, so
wouldn't work in Eclipse.

Tangentially, GWT has really powerful code generation (not just .js
generation, but making .java transformations), where the
differentiating factor is that you can do it across a whole program
(e.g upstream dependencies), and not just the subset of .java files
being current compiled).

This is actually really powerful, as otherwise code generators (like in
BMP) have this cycle problem of "well, b360-am needs compiled first, so
we can use reflection in b360-web to generate some DTOs, then we can
compile b360-web, but it means the DTO generator won't have access to
any reflection info ".

