<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Draconian Overlord</title>
 <link href="http://draconianoverlord.com/atom.xml" rel="self"/>
 <link href="http://draconianoverlord.com/"/>
 <updated>2012-09-22T14:29:22-05:00</updated>
 <id>http://draconianoverlord.com/</id>
 <author>
   <name>Stephen Haberman</name>
   <email>stephen@exigencecorp.com</email>
 </author>

 
 <entry>
   <title>Aggregate Roots in SQL</title>
   <link href="http://draconianoverlord.com/2012/09/16/aggregate-roots-in-sql.html"/>
   <updated>2012-09-16T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/09/16/aggregate-roots-in-sql</id>
   <content type="html">&lt;h1 id='aggregate_roots_in_sql'&gt;Aggregate Roots in SQL&lt;/h1&gt;

&lt;p&gt;I&amp;#8217;m reading through a paper on Google&amp;#8217;s &lt;a href='http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/spanner-osdi2012.pdf'&gt;Spanner&lt;/a&gt;, a distributed database that maintains transactions.&lt;/p&gt;

&lt;p&gt;One interesting snippet is how they&amp;#8217;ve added aggregate roots as a first-class concern in the schema, which is still SQL-eque, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE Users {
  uid INT64 NOT NULL,
  email STRING
} PRIMARY KEY (uid), DIRECTORY;

CREATE TABLE Albums {
  uid INT64 NOT NULL,
  aid INT64 NOT NULL,
  name STRING
} PRIMARY KEY (uid, aid),
INTERLEAVE IN PARENT Users ON DELETE CASCADE;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;DIRECTORY&lt;/code&gt; declares &lt;code&gt;Users&lt;/code&gt; as a top-level aggregate root, and &lt;code&gt;INTERLEAVE IN&lt;/code&gt; declares &lt;code&gt;Albums&lt;/code&gt; as a member of the &lt;code&gt;Users&lt;/code&gt; aggregate root.&lt;/p&gt;

&lt;p&gt;(I&amp;#8217;m using &amp;#8220;aggregate root&amp;#8221;, as terminology from Evan&amp;#8217;s &lt;a href='http://en.wikipedia.org/wiki/Domain-driven_design'&gt;Domain Driven Design&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;I think this is a pretty exciting, albeit somewhat obvious, evolution of relational schemas to handle NoSQL-scale datasets.&lt;/p&gt;

&lt;p&gt;Obviously people have been doing this by hand for a long time, but moving it into the database just makes sense. (It&amp;#8217;s likely other systems I&amp;#8217;m not aware of had already done this; this is just the first I&amp;#8217;ve seen, and especially one that builds it into the SQL schema).&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t finished the paper yet, so I don&amp;#8217;t know if they support cross-aggregate root joins, but they seem to definitely support cross-root transactions.&lt;/p&gt;

&lt;p&gt;So, this has me wondering: if giving the database locality hints works so well, why wasn&amp;#8217;t this done before? E.g. for just regular/pre-NoSQL/on-disk databases?&lt;/p&gt;

&lt;p&gt;Even without being distributed, it seems like it&amp;#8217;d make an awful lot of sense for a database to be able to layout related data (all of the records within an aggregate root) close together on disk, to minimize IO.&lt;/p&gt;

&lt;p&gt;E.g. if all of an employee&amp;#8217;s transactions where in basically-sequential order on disk, retrieving them would be cache-/IO-friendly and so very fast.&lt;/p&gt;

&lt;p&gt;A few thoughts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;With SSDs removing the spinning disk, I suppose physical layout on disk isn&amp;#8217;t that important anymore, at least for single-machine databases. Although that doesn&amp;#8217;t answer why it wasn&amp;#8217;t done before&amp;#8230;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;It would require the database to constantly reorder data to fit the aggregate root grouping; this would likely be expensive, especially to do real-time.&lt;/p&gt;

&lt;p&gt;However, this reminds me of Google&amp;#8217;s &lt;a href='http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/bigtable-osdi06.pdf'&gt;BigTable&lt;/a&gt;, which, after committing the data to a redo log to ensure consistency, delays the larger on-disk data reordering/compaction so that it&amp;#8217;s only done infrequently and not as part of a client request.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Perhaps this is actually doable and pretty routine/old-hat with various databases out there?&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t noticed it before, but that does not mean much.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Perhaps it actually would not help that much.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not an expert on RDMBS literature, or a wide variety of systems, so perhaps this was tried already and deemed not worth it. Seems unlikely to my current intuition, but I suppose I should trust 30 years of RDMBS research over my 5 minutes of musing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seems like a good question for an RDMBS implementation expert, not that I know any to go bug them about it..&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Building Sane Rich User Interfaces</title>
   <link href="http://draconianoverlord.com/2012/09/15/sane-rich-uis.html"/>
   <updated>2012-09-15T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/09/15/sane-rich-uis</id>
   <content type="html">&lt;h1 id='building_sane_rich_user_interfaces'&gt;Building Sane Rich User Interfaces&lt;/h1&gt;

&lt;p&gt;I&amp;#8217;ve been meaning to write a &amp;#8220;lessons learned&amp;#8221; or &amp;#8220;best practice&amp;#8221; sort of post on how I think rich UI applications can be made simpler and less buggy by changing your mindset from an imperative one to a declarative one.&lt;/p&gt;

&lt;p&gt;But, until I do that, I thought it might be better to start with a concrete example. Sometimes its easier to think about something small and concrete before abstracting into the theoretical.&lt;/p&gt;

&lt;p&gt;So, do that, I thought I&amp;#8217;d show an example refactoring of changing some UI code from an imperative approach to a declarative approach.&lt;/p&gt;

&lt;h1 id='the_example_problem'&gt;The Example Problem&lt;/h1&gt;

&lt;p&gt;We&amp;#8217;ll use a relatively small problem that I think is still a good illustration: managing a list of tabs.&lt;/p&gt;

&lt;p&gt;E.g. the tabs might be &amp;#8220;Tab A&amp;#8221;, &amp;#8220;Tab B&amp;#8221;, and &amp;#8220;Tab C&amp;#8221;, and clicking on each tab hides the previous tab&amp;#8217;s content and shows the new tab&amp;#8217;s content.&lt;/p&gt;

&lt;p&gt;Instead of just building this functionality into a larger page, we&amp;#8217;ll break it out into a separate component, &lt;code&gt;Tabs&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id='the_imperative_approach'&gt;The Imperative Approach&lt;/h1&gt;

&lt;p&gt;Jumping straight to the code, this is a slightly simplified version of an imperative approach to building the tabs:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class Tabs extends CompositeIsWidget {

  private IsTabsView view = newTabsView();
  private ArrayList&amp;lt;IsWidget&amp;gt; panels = new ArrayList&amp;lt;IsWidget&amp;gt;();

  public Tabs() {
    setWidget(view);
  }

  public void addTab(String tabName, IsWidget panel) {
    IsTabView itemView = newTabView();
    panels.add(panel);
    if (panels.size() == 1) {
      itemView.listItem().addStyleName(&amp;quot;active&amp;quot;);
      show(panel);
    } else {
      hide(panel);
    }
    itemView.anchor().setText(tabName);
    itemView.anchor().addClickHandler(new ClickHandler() {
      public void onClick(ClickEvent event) {
        for (IsWidget p : panels) {
          hide(p);
        }
        for (int i = 0; i &amp;lt; view.list().getWidgetCount(); i++) {
          view.list().getIsWidget(i).removeStyleName(&amp;quot;active&amp;quot;);
        }
        show(panel);
        itemView.listItem().addStyleName(&amp;quot;active&amp;quot;);
      }
    });
    view.list().add(itemView);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code might be a little foreign if you&amp;#8217;re not used to GWT/Tessell development, but I think in general it&amp;#8217;s pretty easy to follow.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;newXxxView&lt;/code&gt; calls are instantiating templates from GWT&amp;#8217;s &lt;code&gt;ui.xml&lt;/code&gt; UiBinder files, so &lt;code&gt;newTabsView()&lt;/code&gt; returns a styled &lt;code&gt;ul&lt;/code&gt; tag, and &lt;code&gt;newTabView()&lt;/code&gt; returns a styled &lt;code&gt;li&lt;/code&gt; tag for each tab.&lt;/p&gt;

&lt;p&gt;In general, I don&amp;#8217;t think there is anything terribly wrong with this code; the variable names are good, the methods aren&amp;#8217;t egregiously long, and it&amp;#8217;s bug free.&lt;/p&gt;

&lt;p&gt;However, it is very imperative, in that it&amp;#8217;s reactive to user behavior instead of being proactive. For example, what makes it seem imperative is code like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whether a panel is hidden or shown is done reactively in 4 places (show+hide on initial add, show+hide on each click).&lt;/li&gt;

&lt;li&gt;The &lt;code&gt;active&lt;/code&gt; CSS class is added in two places, and removed in one place.&lt;/li&gt;

&lt;li&gt;We have an anonymous inner class that does multiple things in response to a click&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is actually not that bad in this case, but I think the approach, when used in larger components and applications, eventually leads to spaghetti code.&lt;/p&gt;

&lt;p&gt;You end up with lots of &amp;#8220;oh, remember to do this here and there and there&amp;#8221; lines in each place that responds to user input or logic changes. It becomes easy to miss places where updates need to happen, or not make the updates consistent, and results in bugs.&lt;/p&gt;

&lt;h1 id='the_declarative_approach'&gt;The Declarative Approach&lt;/h1&gt;

&lt;p&gt;So, now let&amp;#8217;s try and refactor this code to being more declarative.&lt;/p&gt;

&lt;p&gt;In taking on a declarative mindset, we want to think, without reacting to user input, how can we declare that some behavior of our UI should just happen?&lt;/p&gt;

&lt;p&gt;For example, let&amp;#8217;s think of the behaviors of our tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When I am the current tab, show my panel&lt;/li&gt;

&lt;li&gt;When I am the current tab, set &lt;code&gt;active&lt;/code&gt; on my &lt;code&gt;li&lt;/code&gt; tag&lt;/li&gt;

&lt;li&gt;When I am clicked, make myself the current tab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at these behaviors, the notion of a &amp;#8220;current tab&amp;#8221; is pretty apparent. Really all of our behaviors are based around which tab is the current tab.&lt;/p&gt;

&lt;p&gt;So, let&amp;#8217;s pull out that notion into an abstraction; let&amp;#8217;s make a &lt;code&gt;Tab&lt;/code&gt; and a &lt;code&gt;currentTab&lt;/code&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class Tabs extends CompositeIsWidget {

  private IsTabsView view = newTabsView();
  private Tab currentTab;

  public void addTab(String tabName, IsWidget panel) {
    Tab tab = new Tab(tabName, panel);
    if (currentTab == null) {
      setCurrentTab(tab);
    }
    view.list().add(tab.view);
  }

  private void setCurrentTab(Tab tab) {
    if (currentTab != null) {
      // unstyle old active tab;
    }
    // style new tab
    currentTab = tab;
  }

  private class Tab {
    private IsTabView view = newTabView();
    private Tab(String tabName, IsWidget panel) {
      view.addClickHandler(new ClickHandler() {
        public void onClick(ClickEvent e) {
          setCurrentTab(Tab.this);
        }
      });
    }
  }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is better. We&amp;#8217;ve moved the styling updates into one place, &lt;code&gt;setCurrentTab&lt;/code&gt;, so things are not as spread out.&lt;/p&gt;

&lt;p&gt;However, we&amp;#8217;re still stuck in the reactive model; we&amp;#8217;re having to remember to call &lt;code&gt;setCurrentTab&lt;/code&gt; in all the right places. (Which, granted, in this small example is only two places).&lt;/p&gt;

&lt;p&gt;The stumbling block is that &lt;code&gt;currentTab&lt;/code&gt; is just a field&amp;#8211;we can&amp;#8217;t react to its changes unless we manually add code before/after our own setting of the field.&lt;/p&gt;

&lt;p&gt;Rich UI frameworks, Tessell included, solve this by promoting simple fields into stateful properties, which can watch their current value, and call observers when it is changed. The property is the foundation for models in traditional MVC.&lt;/p&gt;

&lt;p&gt;So, let&amp;#8217;s change &lt;code&gt;currentTab&lt;/code&gt; to a property:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;private BasicProperty&amp;lt;Tab&amp;gt; currentTab =
  basicProperty(&amp;quot;currentTab&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we have an abstraction around the value instead of just the value, we can now setup declarations around the abstraction, the property, and not just the value itself.&lt;/p&gt;

&lt;p&gt;To see how well this works out, we can re-examine our 3 behaviors, and see how they can be translated into declarations. (We&amp;#8217;ll use Tessell&amp;#8217;s DSL, but the same abstractions could be done in any MVC framework.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8220;When I am the current tab, show my panel&amp;#8221; can look like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.when(currentTab).is(this).show(panel);&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&amp;#8220;When I am the current tab, set &lt;code&gt;active&lt;/code&gt; on my &lt;code&gt;li&lt;/code&gt; tag&amp;#8221; can look like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.when(currentTab).is(this).set(active).on(view.li());&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&amp;#8220;When I am clicked, make myself the current tab&amp;#8221; can look like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.onClick(view.anchor()).set(currentTab).to(this);&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;#8217;s it.&lt;/p&gt;

&lt;p&gt;With a property-based DSL, like in Tessell, we have a 1-to-1 mapping between a behavior and 1 line of code.&lt;/p&gt;

&lt;p&gt;This behavior should then &amp;#8220;just work&amp;#8221; as the program runs. Whether in response to user input, or other business logic code changing the model, we don&amp;#8217;t care; our behavior should implicitly stay correctly applied.&lt;/p&gt;

&lt;h1 id='the_final_code'&gt;The Final Code&lt;/h1&gt;

&lt;p&gt;So, here&amp;#8217;s the full refactored code example:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class Tabs extends CompositeIsWidget {

  private IsTabsView view = newTabsView();
  private Binder binder = new Binder();
  private BasicProperty&amp;lt;Tab&amp;gt; currentTab = basicProperty(&amp;quot;currentTab&amp;quot;);

  public Tabs() {
    setWidget(view);
  }

  public void addTab(String tabName, IsWidget panel) {
    Tab tab = new Tab(tabName, panel);
    currentTab.setIfNull(tab);
    view.list().add(tab.view);
  }

  private class Tab {
    private IsTabView view = newTabView();

    private Tab(String tabName, IsWidget panel) {
      view.anchor().setText(tabName);
      binder.when(currentTab).is(this).show(panel);
      binder.when(currentTab).is(this).set(&amp;quot;active&amp;quot;).on(view.listItem());
      binder.onClick(view.anchor()).set(currentTab).to(this);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id='when_this_works'&gt;When This Works&lt;/h1&gt;

&lt;p&gt;Obviously the success of this approach depends on the robustness of the binding DSL, as the DSL has to support the various behaviors you want to perform in a generic way.&lt;/p&gt;

&lt;p&gt;Specifically for Tessell, I won&amp;#8217;t assert that Tessell&amp;#8217;s DSL is as refined as something like Hamcrest, which I think is the prototypical DSL in the Java world. But it supports a pretty wide array of behaviors, and is getting more when they are added as needed.&lt;/p&gt;

&lt;p&gt;Besides the DSL, you also have to represent your problem domain as these stateful properties, basically models, to allow them to be passed declaratively into the DSL and for the DSL to be able to register observers and react to them.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t think either of these are large stumbling blocks, but they do require massaging your codebase to fit the MVC/property/DSL approach, instead of just using raw DTOs.&lt;/p&gt;

&lt;h1 id='rules_of_thumb'&gt;Rules of Thumb&lt;/h1&gt;

&lt;p&gt;I have a few rules of thumb for thinking declaratively:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you find yourself both &lt;em&gt;doing&lt;/em&gt; a behavior and later &lt;em&gt;undoing&lt;/em&gt; that behavior (like applying then unapplying a style), this is a smell there there&amp;#8217;s some higher level abstraction that you could setup declaratively instead of performing it imperatively in multiple places.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Manual event listeners (e.g. anonymous inner classes for &lt;code&gt;addClickListener&lt;/code&gt; in GWT, or anonymous functions for &lt;code&gt;element.onclick&lt;/code&gt; in JavaScript) should be used sparingly, and, if really needed, be as tiny as possible.&lt;/p&gt;

&lt;p&gt;Anonymous inner classes (or callback functions in JavaScript) are a smell that you&amp;#8217;re doing something reactively, e.g. responding to specific UI input and events, that you&amp;#8217;ll probably have to react to elsewhere in a different way, and so there might be an abstraction you could pull out.&lt;/p&gt;

&lt;p&gt;(Tangentially, I think this minimizes the downside of using the Java language, which lacks closures, for rich UI development. Even if you had closures for reacting to user input, it&amp;#8217;s still a reactive model, and so will lead to the same spaghetti code, albeit with less anonymous inner class boilerplate.)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Try and think &amp;#8220;1 behavior == 1 line of code&amp;#8221;, and then extend your DSL as necessary to fit that.&lt;/p&gt;

&lt;p&gt;Even if your behavior is not terribly generic, I think having it in your DSL and out of your controller/presenter code is a better separation of concerns anyway.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='conclusion'&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, those are my thoughts on building a rich UI in a sane way.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t think this is terribly novel, as MVC is old-hat 1980s/90s stuff, albeit reinvented in Web 2.0 apps, and I think everyone generally acknowledges that declarative programming can be, for the right problems, much more succinct than imperative programming.&lt;/p&gt;

&lt;p&gt;But I think, even if its not novel, its easy for developers to stay in an imperative mindset if you&amp;#8217;re not consciously thinking of looking for abstractions and pulling out declarations as they become apparent.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Screencasts in Linux</title>
   <link href="http://draconianoverlord.com/2012/09/14/screencasts-in-linux.html"/>
   <updated>2012-09-14T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/09/14/screencasts-in-linux</id>
   <content type="html">&lt;h1 id='screencasts_in_linux'&gt;Screencasts in Linux&lt;/h1&gt;

&lt;p&gt;A few times a year, I try and record a screencast for one of my open source projects, and I always waste the first 15-30 minutes re-learning how to do screencasts in Linux.&lt;/p&gt;

&lt;h2 id='using_ffmpeg'&gt;Using ffmpeg&lt;/h2&gt;

&lt;p&gt;After trying a variety of GUI programs (like &lt;code&gt;gwt-recordMyDesktop&lt;/code&gt;) with various degrees of success, I&amp;#8217;ve had the best results just running &lt;code&gt;ffmpeg&lt;/code&gt; from the command line. Which, given this is Linux, I guess shouldn&amp;#8217;t be too surprising.&lt;/p&gt;

&lt;p&gt;For my own future reference, the magic incantation I&amp;#8217;ve been using is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ffmpeg
  -f alsa -ac 2 -ar 44100 -i pulse
  -f x11grab -r 15 -s 1920x1080 -i :0.0
  -qscale 4 output.flv&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This records directly to Flash, which, yeah, yeah, isn&amp;#8217;t HTML5, but means, for now, it just works in all browsers.&lt;/p&gt;

&lt;p&gt;Two tips for getting high quality screencasts with &lt;code&gt;ffmpeg&lt;/code&gt; are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ensure you have a recent version of ffmpeg.&lt;/p&gt;

&lt;p&gt;I have had good luck with &lt;code&gt;0.10.4-6:0.10.4-0ubuntu0jon2~oneiric1&lt;/code&gt;, which, IIRC, is newer than the one in the default Ubuntu repos, which I was originally having quality issues with.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Ensure your mic isn&amp;#8217;t over-amplified.&lt;/p&gt;

&lt;p&gt;I was getting terrible sounding audio for a long time before I realized my mic was over-amplified. I&amp;#8217;m not sure how it got that way; it seems like some applications take it upon themselves to adjust it.&lt;/p&gt;

&lt;p&gt;You can check your mic settings in Sound Settings &amp;gt; Input, where there is a slider. I find &amp;#8220;Unamplified&amp;#8221; is too low, but &amp;#8220;100%&amp;#8221; is way too high&amp;#8211;you get a constant buzz throughout the screencast.&lt;/p&gt;

&lt;p&gt;Putting the slider at ~20% works best for me, but it should be easy to find the ideal setting for you by doing a few test screencasts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='using_flowplayer'&gt;Using FlowPlayer&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://flowplayer.org/'&gt;FlowPlayer&lt;/a&gt; is a free Flash movie player that I admittedly struggled to setup. Especially in pages that are generated by jekyll, as FlowPlayer is very finicky about the HTML being exactly what it expected.&lt;/p&gt;

&lt;p&gt;So, along with the regular setup instructions of including their JavaScript file/etc., my current incantation that works in a jekyll/Markdown page is:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &amp;lt;a href=&amp;quot;http://.../screencast.flv&amp;quot; style=&amp;quot;display:block;width:520px;height:330px;margin-left:1em;&amp;quot; id=&amp;quot;player&amp;quot;&amp;gt; &amp;lt;/a&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;!-- 
    flowplayer(&amp;quot;player&amp;quot;, &amp;quot;casts/flowplayer-3.2.7.swf&amp;quot;, { clip: { autoPlay: false } });
  --&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The subtle but important thing to note here is the space before the closing &lt;code&gt;&amp;lt;/a&amp;gt;&lt;/code&gt; tag; this keeps jekyll from munging the HTML into something that the FlowPlayer JavaScript doesn&amp;#8217;t like.&lt;/p&gt;

&lt;h2 id='good_luck'&gt;Good Luck&lt;/h2&gt;

&lt;p&gt;So, that is what works for me. YMMV. If you end up recording any screenshots of your programming projects with this, post a link in the comments, I&amp;#8217;d enjoy checking it out.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Tessell Gets Member Changed Events</title>
   <link href="http://draconianoverlord.com/2012/08/30/tessell-gets-member-changed-events.html"/>
   <updated>2012-08-30T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/08/30/tessell-gets-member-changed-events</id>
   <content type="html">&lt;h1 id='tessell_gets_member_changed_events'&gt;Tessell Gets Member Changed Events&lt;/h1&gt;

&lt;p&gt;Tessell got a feature I&amp;#8217;d been meaning to add for awhile: member changed events.&lt;/p&gt;

&lt;p&gt;Tessell has always had property changed events, e.g. &lt;code&gt;StringProperty&lt;/code&gt; gets a new value, so it fires a change event, which, via data-binding, auto-updates the view:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.bind(someStringProperty).to(view.someNameField);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which has handled a surprising number of use cases over Tessell&amp;#8217;s lifetime.&lt;/p&gt;

&lt;p&gt;But the other hip JavaScript MVC frameworks usually have this notion of &amp;#8220;member changed&amp;#8221; (my made-up term), where if you have a model:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;class EmployeeModel {
  StringProperty name;
  StringProperty city;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can, besides listening to &lt;code&gt;name&lt;/code&gt;/&lt;code&gt;city&lt;/code&gt; change events, listen to change events on the model, and get notified when any of the properties of the model changes.&lt;/p&gt;

&lt;p&gt;This also typically works recursively up a model tree, e.g. if you add a parent/child model:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;class EmployeeModel {
  StringProperty name;
  List&amp;lt;AddressModel&amp;gt; addresses;
}

class AddressModel {
  StringProperty city;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then any change of an address&amp;#8217;s &lt;code&gt;city&lt;/code&gt; property will not only fire the event on &lt;code&gt;AddressModel&lt;/code&gt;, but also on the parent &lt;code&gt;EmployeeModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, after thinking Tessell should have that for awhile, I finally got around to it:&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/stephenh/tessell/commit/47b0c12fe864a7ba1848fece486a13d8d01242f5'&gt;Add MemberChangedEvent to percolate changes up the model tree.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coincidentally, I had a chance to use this today, with some data-binding:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.onMemberChange(employeeModel).execute(saveCommand);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that any time any property on the &lt;code&gt;EmployeeModel&lt;/code&gt; changes, we send it to the server (yes, doing this manually is terribly unhip, compared to transparent persistence frameworks like Meteor).&lt;/p&gt;

&lt;p&gt;&amp;#8230;in retrospect, &lt;code&gt;ModelChangedEvent&lt;/code&gt; probably would have been a better name. Although &lt;code&gt;ListProperty&lt;/code&gt; also fires these &amp;#8220;something I own changed&amp;#8221; events, so that is probably why I shied away from &amp;#8220;model&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I had also thought of reusing &lt;code&gt;PropertyChangedEvent&lt;/code&gt;, instead of creating a new event type. This seems to be what some of the other frameworks do, e.g. Backbone, which just have &lt;code&gt;change&lt;/code&gt;, which is used to denote either a property itself changing or the model implicitly changing. Perhaps this would have been better, but for now I thought the semantic distinction seemed worth making it a separate event type.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Optional Folders in Eclipse</title>
   <link href="http://draconianoverlord.com/2012/08/29/eclipse-optional-folders.html"/>
   <updated>2012-08-29T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/08/29/eclipse-optional-folders</id>
   <content type="html">&lt;h1 id='optional_folders_in_eclipse'&gt;Optional Folders in Eclipse&lt;/h1&gt;

&lt;p&gt;Often times in Eclipse, you&amp;#8217;ll add folders for generated code to the build path, e.g. &lt;code&gt;target/gen-java-src&lt;/code&gt; or something like this.&lt;/p&gt;

&lt;p&gt;Since the code is generated, you typically don&amp;#8217;t check it in, which is fine, but it means on initial checkout Eclipse will complain that the folder doesn&amp;#8217;t exist yet and stop the whole build.&lt;/p&gt;

&lt;p&gt;It turns out there is a way to mark output folders as optional, but I pull my hair out trying to find the syntax every time because, AFAICT, there is not a config option for it in their UI.&lt;/p&gt;

&lt;p&gt;So, for posterity and my own sanity, the syntax is:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;classpathentry kind=&amp;quot;src&amp;quot; path=&amp;quot;target/gen-java-src&amp;quot;&amp;gt;
  &amp;lt;attributes&amp;gt;
    &amp;lt;attribute name=&amp;quot;optional&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
  &amp;lt;/attributes&amp;gt;
&amp;lt;/classpathentry&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Faking at the Right Level</title>
   <link href="http://draconianoverlord.com/2012/07/23/faking-at-the-right-level.html"/>
   <updated>2012-07-23T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/07/23/faking-at-the-right-level</id>
   <content type="html">&lt;h1 id='faking_at_the_right_level'&gt;Faking at the Right Level&lt;/h1&gt;

&lt;p&gt;It&amp;#8217;s common to use fakes (either mocks or stubs) to test specific layers of your code without incurring the complexity and expense of also exercising any dependent layers (e.g. testing your UI layer without having to test/touch your database layer).&lt;/p&gt;

&lt;h2 id='inproject_abstraction'&gt;In-Project Abstraction&lt;/h2&gt;

&lt;p&gt;For example, if you&amp;#8217;re writing an API client that talks over HTTP, it makes sense to add an &lt;code&gt;Http&lt;/code&gt; abstraction that your &lt;code&gt;ApiClient&lt;/code&gt; uses instead of directly calling an HTTP library implementation like &lt;code&gt;commons-http&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You might start out with something simple:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;// interface you&amp;#39;re exposing to clients
trait ApiClient {
  def getFoo(id: Int)
  def sendFoo(foo: Foo)
}

// real implementation for clients
class ApiClientImpl(http: Http) extends ApiClient {
  override def getFoo(id: Int) = {
    // use http.get here
  }

  override def sendFoo(foo: Foo) = {
    // use http.post here
  }
}

// http abstraction for testing ApiClientImpl
trait Http {
  def get(path: String): String
  def post(path: String, body: String): Unit
}

// http implementation for real usage
class HttpImpl extends Http {
  override def get(path: String) = {
    // use commons-http
  }

  override def post(path: String, body: String) = {
    // use commons-http
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that this &lt;code&gt;Http&lt;/code&gt; interface is really simple&amp;#8211;it is something you&amp;#8217;d start with, and then add more support for other methods, headers, return codes, etc., if/as you need them.)&lt;/p&gt;

&lt;p&gt;This is fairly standard, encapsulating your code from dependencies. It simplifies your code, by providing the bulk of your codebase (&lt;code&gt;ApiClientImpl&lt;/code&gt;) with a simple/idealized HTTP API that then in just one class you adapt to a specific underlying concrete implementation.&lt;/p&gt;

&lt;p&gt;Also, with the &lt;code&gt;Http&lt;/code&gt; abstraction, now in your tests for &lt;code&gt;ApiClientImpl&lt;/code&gt;, you can fake out the HTTP layer:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;val stubHttp = new StubHttp()
stubHttp.when(&amp;quot;GET /foo&amp;quot;).thenRespond(
  &amp;quot;{ foo: { id: 1 } }&amp;quot;)

val api = new ApiClientImpl(stubHttp)
// hits the in-memory stub
val foo = api.getFoo()
assertThat(foo.getId(), is(1));

api.sendFoo(new Foo(2));
stubHttp.assertHas(
  &amp;quot;POST /foo&amp;quot;,
  &amp;quot;{ foo: { id: 2 } }&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is still pretty standard stuff. I frequently start out with mocks, but eventually end up with stubs, as I think their state/abstraction scales better than pure mocks (see &lt;a href='/2010/07/09/why-i-dont-like-mocks.html'&gt;Why I Like Stubs&lt;/a&gt; for a longer tangent on that).&lt;/p&gt;

&lt;h2 id='downstreamproject_abstraction'&gt;Downstream-Project Abstraction&lt;/h2&gt;

&lt;p&gt;One thing to be careful about is avoiding the temptation to reuse one project&amp;#8217;s abstraction level (e.g. &lt;code&gt;Http&lt;/code&gt;) for also testing downstream projects.&lt;/p&gt;

&lt;p&gt;For example, let&amp;#8217;s say you have a &lt;code&gt;SyncService&lt;/code&gt; that uses your &lt;code&gt;ApiClient&lt;/code&gt;. I&amp;#8217;ve gone down the path of writing something like:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;def testSyncService() {
  val stubHttp = new StubHttp()
  val apiClient = new ApiClientImpl(stubHttp) // the real api client
  val sync = new SyncService(apiClient)

  // now, i want to test sync sending a foo
  sync.run()

  stubHttp.assertHas(
    &amp;quot;POST /foo&amp;quot;,
    &amp;quot;{ foo: id: 2 } }&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;#8217;re testing &lt;code&gt;SyncService&lt;/code&gt; not by observing state changes/method calls to it&amp;#8217;s direct dependencies, but in the dependency of it&amp;#8217;s dependency.&lt;/p&gt;

&lt;p&gt;This may seem harmless at first, but it quickly becomes tedious making the &lt;code&gt;SyncService&lt;/code&gt; fake out such a low-level implementation detail like HTTP just to test it&amp;#8217;s high level operation (finding &lt;code&gt;Foo&lt;/code&gt;s and sending them to the &lt;code&gt;ApiClient&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For example, once your application becomes more complex, syncing &lt;code&gt;Foo&lt;/code&gt;s might first require syncing &lt;code&gt;Bar&lt;/code&gt;s and &lt;code&gt;Zaz&lt;/code&gt;s, all of which need low-level &lt;code&gt;GET&lt;/code&gt;s/&lt;code&gt;POST&lt;/code&gt;s faked out just to test a &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='use_projectspecific_abstractions'&gt;Use Project-Specific Abstractions&lt;/h2&gt;

&lt;p&gt;Instead, as is perhaps obvious, it is a lot cleaner to test &lt;code&gt;SyncService&lt;/code&gt; by faking out it&amp;#8217;s dependencies directly, e.g.:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;def testSyncService() {
  val mockClient = new MockClient()
  val sync = new SyncService(mockClient)

  sync.run()

  verify(mockClient).sendFoo(...)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where this becomes really helpful is when you stub at this project-specific level, as you can start applying state and dummy behavior to cut down on the mock tedious.&lt;/p&gt;

&lt;p&gt;For example, a stub &lt;code&gt;ApiClient&lt;/code&gt; might look like:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;class StubApiClient extends ApiClient {
  private val instances = List[Foo]()

  override def getFoo(id: Int) = {
    instances.find(_.id == id).get
  }

  override def sendFoo(foo: Foo) = {
    if (foo.getId == null) {
      sys.error(&amp;quot;foo id is required&amp;quot;)
    }
    if (instances.find(_.id == id)) {
      sys.error(&amp;quot;foo id already exists&amp;quot;)
    }
    instances += foo
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this dummy behavior, you can now put parts of &lt;code&gt;SyncService&lt;/code&gt; under test that need to get/send &lt;code&gt;Foo&lt;/code&gt;s and have both the &lt;code&gt;SyncService&lt;/code&gt; implementation and your test method get the behavior for free (no setting up mocks with &lt;code&gt;when sendFoo&lt;/code&gt; for every little &lt;code&gt;sendFoo&lt;/code&gt; call).&lt;/p&gt;

&lt;h2 id='reuse_stubs_across_projects'&gt;Reuse Stubs Across Projects&lt;/h2&gt;

&lt;p&gt;Once your &lt;code&gt;ApiClient&lt;/code&gt; is used as a dependency by multiple downstream projects, it makes a lot of sense to reuse the &lt;code&gt;StubApiClient&lt;/code&gt; for all the downstream project&amp;#8217;s tests.&lt;/p&gt;

&lt;p&gt;This is so helpful that I&amp;#8217;ve begun packaging the &lt;code&gt;StubApiClient&lt;/code&gt; directly in the same jar as the &lt;code&gt;ApiClientImpl&lt;/code&gt;. Not because it&amp;#8217;s used in production, but because any project that uses &lt;code&gt;ApiClientImpl&lt;/code&gt; almost always uses the &lt;code&gt;StubApiClient&lt;/code&gt; for its tests.&lt;/p&gt;

&lt;p&gt;This allows any downstream project to get a fast, in-memory &amp;#8220;smart&amp;#8221; (e.g. can handle generic behavior like adding a &lt;code&gt;Foo&lt;/code&gt; and then returning the same &lt;code&gt;Foo&lt;/code&gt; later, without constantly respecifying the behavior in the tests) stub client almost (after you initially create it) for free to use in their tests.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Politely Refactoring Code</title>
   <link href="http://draconianoverlord.com/2012/07/15/politely-refactoring-code.html"/>
   <updated>2012-07-15T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/07/15/politely-refactoring-code</id>
   <content type="html">&lt;h1 id='politely_refactoring_code'&gt;Politely Refactoring Code&lt;/h1&gt;

&lt;p&gt;I just read Bob Martin&amp;#8217;s &lt;a href='http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882'&gt;Clean Coder&lt;/a&gt; and really enjoyed it. (Thanks, &lt;a href='http://blog.blainebuxton.com/'&gt;Blaine&lt;/a&gt;, for the book recommendation!) There are quite a few &amp;#8220;back in the day&amp;#8221; stories, but I overall liked and enjoyed Bob&amp;#8217;s points about professionalism in software development.&lt;/p&gt;

&lt;p&gt;He also makes a very convincing case for &lt;a href='http://en.wikipedia.org/wiki/Test-driven_development'&gt;TDD&lt;/a&gt;, which I had generally considered myself a practitioner of. But after reading Bob&amp;#8217;s book, sheesh, I&amp;#8217;m an amateur, as I frequently violate the &amp;#8220;3 rules&amp;#8221; of TDD. So, I have a renewed conviction to adhere to TDD.&lt;/p&gt;

&lt;p&gt;While discussing TDD, Bob also reiterated one of the most important, to me, aspects of having tests: it gives you the freedom to mercilessly refactor.&lt;/p&gt;

&lt;p&gt;As I think/hope is generally understood, programmers who have solid tests can constantly change and tweak the code they maintain to make it better, without fear of breaking things. As long as the tests still pass, you&amp;#8217;re good to go. Which is fine, nothing new.&lt;/p&gt;

&lt;p&gt;However, speaking from experience, changing code this mercilessly can get touchy when the code in question is someone else&amp;#8217;s. To the original author, the refactoring can feel like an insult, insinuating their original code was inferior.&lt;/p&gt;

&lt;p&gt;Which, yeah, is sometimes the case. However, most of the time, evolutionary improvement is just a natural process that happens to all code, regardless of who wrote it, as programmers gain more understanding, implement new requirements, or just provide a fresh set of eyes.&lt;/p&gt;

&lt;p&gt;So, once you do find yourself refactoring other people&amp;#8217;s code, I think you can make the process much less emotional by how you approach and implement the changes. Specifically, I think one of the most important things is to use small, explicit commits that are objectively &amp;#8220;better&amp;#8221;.&lt;/p&gt;

&lt;p&gt;For example, if you rip through a module, change everything up, and push out a single commit with a commit message of &amp;#8220;Cleanup.&amp;#8221;, the original author is going to see a huge, likely incomprehensible diff (especially if they&amp;#8217;re not as experienced in the language as you are), utter &amp;#8220;wtf, this is not cleaner,&amp;#8221; and generally resent your efforts.&lt;/p&gt;

&lt;p&gt;Instead, if you make small commits, e.g. &amp;#8220;Format&amp;#8221;, &amp;#8220;Use nicer variable names&amp;#8221;, &amp;#8220;Extract method foo to class Bar&amp;#8221;, etc., breaking the previous 1 large commit into 20 small, incremental ones, you explain and document each step of the process.&lt;/p&gt;

&lt;p&gt;Now when the original author sees the changes, either after &lt;code&gt;svn up&lt;/code&gt; or in a code review, instead of a large &amp;#8220;just trust me, this is better&amp;#8221; diff, they should be able to follow along and generally agree that each small step is a gradual improvement. Then, instead of the &amp;#8220;wtf&amp;#8221; reaction, hopefully the reaction is &amp;#8220;okay, I can see how/why this really is better&amp;#8230;cool&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Besides the immediate communication, my other intent with this approach is pedagogical. Hopefully when the original author sees each commit, they will internalize that one small improvement and, in the future, be able to apply the same refactoring to their own code. Granted, whether or not this learning takes place ultimately depends on the initiative and competency of the original author.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Joist Snapshots, A 2nd-Level Cache Alternative</title>
   <link href="http://draconianoverlord.com/2012/06/24/joist-snapshots.html"/>
   <updated>2012-06-24T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/06/24/joist-snapshots</id>
   <content type="html">&lt;h1 id='joist_snapshots_a_2ndlevel_cache_alternative'&gt;Joist Snapshots, A 2nd-Level Cache Alternative&lt;/h1&gt;

&lt;p&gt;&lt;a href='http://joist.ws'&gt;Joist&lt;/a&gt; 1.4.x got a new feature, Unit of Work snapshots, which I think are a neat way to handle a particular use-case that sometimes the chattiness of ORMs doesn&amp;#8217;t handle well.&lt;/p&gt;

&lt;h2 id='the_use_case'&gt;The Use Case&lt;/h2&gt;

&lt;p&gt;Specifically, I worked on an enterprise system once that had a fairly common pattern of:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;// as part of the nightly batch cycle
for (Integer parentId : allParentIds) {
  for (Integer childId : loadParent(parentId).getChildIds()) {
    for (Integer grandId : loadChild(childId).getGrandChildrenIds()) {
      // load parent
      // load child
      // perform business logic on the grand child
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each 3rd-level/grand child entity was processed in its own transaction. But, for an ORM, that generally means a new session, which means re-querying the database for the parent, the child, etc., on each iteration of the loop.&lt;/p&gt;

&lt;p&gt;For a few, or even a few hundred, iterations, this isn&amp;#8217;t a big deal. But on iteration 1,000 or 10,000, re-loading the parent (and any parent-level related domain objects) on each time through the loop, and the latency inherent in that going out over the wire, starts to add up.&lt;/p&gt;

&lt;h2 id='the_typical_solution_2nd_level_cache'&gt;The Typical Solution, 2nd Level Cache&lt;/h2&gt;

&lt;p&gt;The answer most ORMs, AFAIK, have to this scenario is to turn on 2nd-level caching. Then the parent and child entities will be cached in memory, avoiding the wire call, and things will be snappy again.&lt;/p&gt;

&lt;p&gt;However, I have a few problems with 2nd-level caching:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is commonly all-or-nothing at the entity level. E.g. &lt;code&gt;Parent&lt;/code&gt; is always cached or never cached.&lt;/p&gt;

&lt;p&gt;I dislike this lack of flexibility, because often times I don&amp;#8217;t want the caching&amp;#8211;if I&amp;#8217;m on the CRUD screen for the parent, I really do want to see the latest results, even if it means a wire call.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;You&amp;#8217;re basically knowingly introducing eventual consistency throughout your system, where, sans a fancy cache invalidation scheme, you will have stale data.&lt;/p&gt;

&lt;p&gt;Given one of the main advantages of an RDBMS is the simplicity of the ACID semantics, I generally try and hold on to that simplicity for as long as possible, and only give it up if I absolutely have too.&lt;/p&gt;

&lt;p&gt;And I don&amp;#8217;t trust fancy distributed cache invalidation schemes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For these reasons, I&amp;#8217;ve generally avoided using an ORM-based 2nd-level cache.&lt;/p&gt;

&lt;p&gt;Which is not to say I never use caching; caching is great, when appropriate. I just usually have better luck applying it more subtly than entity-level all-or-nothing. There are pros and cons to this, but I&amp;#8217;ll leave it at that for now.&lt;/p&gt;

&lt;h2 id='an_alternative_joists_snapshots'&gt;An Alternative, Joist&amp;#8217;s Snapshots&lt;/h2&gt;

&lt;p&gt;So, Joist&amp;#8217;s alternative was to look at this specific use case and realize the programmer probably knows &lt;em&gt;exactly what data they want to cache&lt;/em&gt;, and &lt;em&gt;what the scope of that cache should be&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I.e., in the above loop, we don&amp;#8217;t need &lt;code&gt;Parent&lt;/code&gt; cached for the entire JVM, and to force every single other thread to use the cached version (especially if they don&amp;#8217;t want to, whatever their process/semantics happen to be). If they make an extra wire call, that&amp;#8217;s fine. We just don&amp;#8217;t want to make 10,000 in a loop.&lt;/p&gt;

&lt;p&gt;Snapshots then, allow the programmer to do this, e.g.:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;// as part of the nightly batch cycle
for (Integer parentId : allParentIds) {
  // load parent data just once
  Snapshot s1 = UoW.snapshot(repo, new Block() {
    public void go() {
      // load parent, any other parent-level objects
    }
  };
  for (Integer childId : loadParent(parentId).getChildIds()) {
    Snapshot s2 = UoW.snapshot(repo, s1, new Block() {
      public void go() {
        // load child, any other child-level objects
      }
    };
    for (Integer grandId : loadChild(childId).getGrandChildrenIds()) {
      // now use cached parent/child data:
      UoW.go(repo, s2, ...);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Java&amp;#8217;s anonymous inner classes, this is a tad verbose, but should show the basic idea.&lt;/p&gt;

&lt;p&gt;In the outer loops, the programmer has a chance to load this level of domain objects just once. First for &lt;code&gt;Parent&lt;/code&gt; level in the &lt;code&gt;s1&lt;/code&gt; snapshot, and the building on top of that for the &lt;code&gt;Child&lt;/code&gt; level in the &lt;code&gt;s2&lt;/code&gt; snapshot.&lt;/p&gt;

&lt;p&gt;Now with the &lt;code&gt;s2&lt;/code&gt; snapshot, any loads for the &lt;code&gt;Parent&lt;/code&gt; or &lt;code&gt;Child&lt;/code&gt; entities (including their one-to-many relations/collections) within the grand child&amp;#8217;s Unit of Work will avoid going over the wire, and instead use the serialized state from the snapshots.&lt;/p&gt;

&lt;p&gt;Which, yeah, this is still a cache. However, the important difference is that the programmer explicitly populates and references the cache.&lt;/p&gt;

&lt;p&gt;This can be a good thing or a bad thing. It does mean more code, i.e. it&amp;#8217;s not completely transparent like ORM-wide 2nd level caching is, where the client code doesn&amp;#8217;t even know it&amp;#8217;s happening. (If you want/need that, that&amp;#8217;s fine, maybe Joist will do that someday, it just does not currently.)&lt;/p&gt;

&lt;p&gt;Personally, I find the more explicit snapshot approach to be, for this use case, both more intuitive and more precise than just saying &amp;#8220;any &lt;code&gt;Parent&lt;/code&gt; entity in the app may be ~5 minutes old&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Sometimes implicit semantics are nice, and sometimes they&amp;#8217;re too magical. It is a trade off that will depend on your situation.&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;ll note that I think often times the more implicit approach wins de facto, just because it has less LOC. This may be perfectly fine, as I&amp;#8217;m certainly not advocating boilerplate. But abstractions have their cost (conceptual overhead, leakiness, etc.) and that sometimes you&amp;#8217;re better off just using the more explicit approach whose semantics are easier to understand.&lt;/p&gt;

&lt;h2 id='future_improvements'&gt;Future Improvements&lt;/h2&gt;

&lt;p&gt;I should add some very basic metrics to Joist to allow easy profiling, without using a full-fledged profiler. Since often times a system won&amp;#8217;t be bottlenecked on CPU or IO, but instead always waiting on wire call latency, easily showing what the ORM is up to would be really nice.&lt;/p&gt;

&lt;p&gt;For example, every 10-30 seconds, output the number of object loads per table, number of collection loads per table, and maybe even highlight specific objects being constantly reloaded.&lt;/p&gt;

&lt;p&gt;E.g., for the original code snippet above, if &lt;code&gt;Parent#5&lt;/code&gt; showed up in Joist&amp;#8217;s stats as being loaded more than 5-10/whatever times per 30-second interval, Joist could log an info/warning that the programmer might look into applying snapshot-style caching.&lt;/p&gt;

&lt;p&gt;That should make hunting down ORM-level waste, or at least the low-hanging fruit that hopefully is 80% of the performance problem, pretty easy.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CSS Quirk, Collapsing Margins</title>
   <link href="http://draconianoverlord.com/2012/06/23/collapsing-margins.html"/>
   <updated>2012-06-23T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/06/23/collapsing-margins</id>
   <content type="html">&lt;h1 id='css_quirk_collapsing_margins'&gt;CSS Quirk, Collapsing Margins&lt;/h1&gt;

&lt;p&gt;I occasionally have to hunt down obscure (to me) browser/CSS behavior, and usually just end up leaving the lessons learned/temp files on my system somewhere, only to come back across them months later and not really remember what they were for anyway.&lt;/p&gt;

&lt;p&gt;So, this is my attempt to clean up and publish some of them, for my own memory/organization if nothing else.&lt;/p&gt;

&lt;p&gt;Anyway, collapsed margins&amp;#8211;it seems like I really should have known this by now, but it turns out margins of child elements can effectively replace their parent element&amp;#8217;s margin.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a simple example. Given this HTML:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just have a parent/child. Let&amp;#8217;s style them as nested boxes with this CSS:&lt;/p&gt;

&lt;pre class='brush:css'&gt;&lt;code&gt;.parent {
  background: blue;
  width: 200px;
  height: 200px;
}
.child {
  background: red;
  width: 100px;
  height: 100px;
  margin: 50px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We expect a 200x200 blue box with a 100x100 red box inside of it, with 50px of blue showing all around the red box.&lt;/p&gt;

&lt;p&gt;However, it actually looks like:&lt;/p&gt;
&lt;div class='parent'&gt;
  &lt;div class='child'&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;note there is no blue on top&amp;#8211;the child element is laying right at the top of it&amp;#8217;s parent, very contrary to what our &lt;code&gt;margin: 50px&lt;/code&gt; was supposed to do. Wtf?&lt;/p&gt;

&lt;p&gt;Welcome to collapsing margins&amp;#8211;briefly, it two (vertical) margins touch, the bigger of the two wins, and gets percolated to the outer most element.&lt;/p&gt;

&lt;p&gt;The unintuitive fix is to add &lt;code&gt;overflow: auto&lt;/code&gt; to the parent:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;parent&amp;quot; style=&amp;quot;overflow: auto;&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;child&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now it works as expected:&lt;/p&gt;
&lt;div style='overflow: auto;' class='parent'&gt;
  &lt;div class='child'&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Rather than trying to explain this here, I&amp;#8217;ll refer you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;a href='http://www.howtocreate.co.uk/tutorials/css/margincollapsing'&gt;tutorial&lt;/a&gt;, which I found to be the best explanation of margin collasping&lt;/li&gt;

&lt;li&gt;This &lt;a href='http://stackoverflow.com/questions/1878997/child-elements-with-margins-within-divs'&gt;Stackoverflow&lt;/a&gt; question, which is how I originally discovered what was going on&lt;/li&gt;

&lt;li&gt;The &lt;a href='http://www.w3.org/TR/CSS2/box.html#collapsing-margins'&gt;CSS2 spec&lt;/a&gt;, if you&amp;#8217;re in to that sort of thing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, that&amp;#8217;s it. I&amp;#8217;m not entirely sure it&amp;#8217;s worth putting these together, given it&amp;#8217;s pretty light content compared to what I usually try and write, but eh, we&amp;#8217;ll see how it goes.&lt;/p&gt;
&lt;style&gt;
  .parent {
    background: blue;
    width: 200px;
    height: 200px;
  }
  .child {
    background: red;
    width: 100px;
    height: 100px;
    margin: 50px;
  }
&lt;/style&gt;</content>
 </entry>
 
 <entry>
   <title>How to Sanely Use Ivy's Artifact Tags</title>
   <link href="http://draconianoverlord.com/2012/06/22/ivy-artifact-tags.html"/>
   <updated>2012-06-22T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/06/22/ivy-artifact-tags</id>
   <content type="html">&lt;h1 id='how_to_sanely_use_ivys_artifact_tags'&gt;How to Sanely Use Ivy&amp;#8217;s Artifact Tags&lt;/h1&gt;

&lt;p&gt;&lt;a href='http://ant.apache.org/ivy/'&gt;Ivy&lt;/a&gt;, everyone&amp;#8217;s favorite &amp;#8220;it&amp;#8217;s not Maven&amp;#8221; dependency manager, has a unique, idiosyncratic feature I was fighting with today: artifact tags to override which jars/artifacts you use from upstream projects.&lt;/p&gt;

&lt;p&gt;While Maven has only project-to-project dependencies (i.e. you get all the jars in each upstream project whether you want them or not), Ivy adds the concept of configurations to select subsets of artifacts within your dependencies. E.g., in an &lt;code&gt;ivy.xml&lt;/code&gt; file:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;upstream&amp;quot; name=&amp;quot;project&amp;quot; rev=&amp;quot;1.0&amp;quot;
    conf=&amp;quot;default-&amp;gt;someSubsetConf&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using &lt;code&gt;someSubsetConf&lt;/code&gt;, you can select a specific set of artifacts (only those that its own &lt;code&gt;ivy.xml&lt;/code&gt; file declares as part of it&amp;#8217;s &lt;code&gt;someSubsetConf&lt;/code&gt;) from the upstream project.&lt;/p&gt;

&lt;p&gt;Ivy goes further, and that if the upstream project doesn&amp;#8217;t have a configuration in its &lt;code&gt;ivy.xml&lt;/code&gt; file that suits your needs, you can request specific artifacts directly, e.g.:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;upstream&amp;quot; name=&amp;quot;project&amp;quot; rev=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;onlyTheOneYouWant&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this flexibility, which is very characteristic of Ivy, is often times nice, I do sometimes wonder whether Maven&amp;#8217;s non-flexibility and hence simplicity in not having confs and artifact overrides is the better choice in the long run.&lt;/p&gt;

&lt;p&gt;Nonetheless, I use Ivy, and have used &lt;code&gt;artifact&lt;/code&gt; tags on several occasions, but they never worked the way I thought they would, so I finally sat down and tried to systematically understand their semantics.&lt;/p&gt;

&lt;h2 id='the_short_version'&gt;The Short Version&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer to not use &lt;code&gt;artifact&lt;/code&gt; tags&amp;#8211;if possible, change the upstream project&amp;#8217;s configurations to match your needs and just rely on configuration-to-configuration mapping. It&amp;#8217;s more intuitive, less boilerplate.&lt;/p&gt;

&lt;p&gt;If you must use &lt;code&gt;artifact&lt;/code&gt; tags, then:&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;Always&lt;/em&gt; add a &lt;code&gt;conf&lt;/code&gt; attribute to your &lt;code&gt;artifact&lt;/code&gt; tag, and&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;em&gt;Always&lt;/em&gt; add a &lt;code&gt;conf&lt;/code&gt; attribute to the parent &lt;code&gt;dependency&lt;/code&gt; tag that is the union of all of the confs used by &lt;code&gt;artifact&lt;/code&gt; tags within that dependency.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;upstream&amp;quot; name=&amp;quot;project&amp;quot;
    rev=&amp;quot;1.0&amp;quot; conf=&amp;quot;conf1,conf2&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;artifact1&amp;quot; conf=&amp;quot;conf1&amp;quot;/&amp;gt;
  &amp;lt;artifact name=&amp;quot;artifact2&amp;quot; conf=&amp;quot;conf2&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will put &lt;code&gt;artifact1&lt;/code&gt; in your &lt;code&gt;conf1&lt;/code&gt; and &lt;code&gt;artifact2&lt;/code&gt; in your &lt;code&gt;conf2&lt;/code&gt;, just as you would expect. Simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be warned:&lt;/strong&gt; if you don&amp;#8217;t include these &lt;code&gt;conf&lt;/code&gt; attributes exactly as I&amp;#8217;ve described, things will very likely not work they way you expect.&lt;/p&gt;

&lt;p&gt;If you don&amp;#8217;t care why, that&amp;#8217;s fine, this template should serve you well. If you do want to understand the incantation, that&amp;#8217;s what the next section is about.&lt;/p&gt;

&lt;h2 id='the_long_version'&gt;The Long Version&lt;/h2&gt;

&lt;p&gt;This section describes each of the variations of &lt;code&gt;dependency&lt;/code&gt; and &lt;code&gt;artifact&lt;/code&gt; tags I used to derive Ivy&amp;#8217;s semantics and decipher the docs.&lt;/p&gt;

&lt;p&gt;Note that I used Ivy 2.3.0-rc1, which as of this writing is current, and the &lt;code&gt;springframework&lt;/code&gt; dependency comes from &lt;a href='http://www.bizo.com'&gt;Bizo&lt;/a&gt;&amp;#8217;s internal Ivy repository, so it doesn&amp;#8217;t match the Maven central namespace or anything like that. Substitute your own dependency with a non-trivial amount of artifacts if you want to follow along.&lt;/p&gt;

&lt;p&gt;The base &lt;code&gt;ivy.xml&lt;/code&gt; file I was using looked like:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;...

&amp;lt;configurations&amp;gt;
  &amp;lt;conf name=&amp;quot;default&amp;quot;/&amp;gt;
  &amp;lt;conf name=&amp;quot;buildtime&amp;quot; visibility=&amp;quot;private&amp;quot;/&amp;gt;
  &amp;lt;conf name=&amp;quot;test&amp;quot; visibility=&amp;quot;private&amp;quot;/&amp;gt;
  &amp;lt;conf name=&amp;quot;sources&amp;quot;/&amp;gt;
&amp;lt;/configurations&amp;gt;

&amp;lt;dependencies
    defaultconfmapping=&amp;quot;sources-&amp;gt;sources();%-&amp;gt;default&amp;quot;
    defaultconf=&amp;quot;default;sources&amp;quot;&amp;gt;
  ...
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, each of the variations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Just a regular &lt;code&gt;dependency&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: all &lt;code&gt;default&lt;/code&gt; spring artifacts (web, servlets, test, etc.)&lt;/li&gt;

&lt;li&gt;buildtime, test: no spring artifacts&lt;/li&gt;

&lt;li&gt;sources: all &lt;code&gt;sources&lt;/code&gt; spring artifacts (web, servlets, test, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected, given our &lt;code&gt;ivy.xml&lt;/code&gt; file&amp;#8217;s &lt;code&gt;defaultconf=&amp;quot;default;sources&amp;quot;&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;This is actually fine, and shows the intuitiveness of configuration-to-configuration mapping.&lt;/p&gt;

&lt;p&gt;But the idea is that the Spring &lt;code&gt;default&lt;/code&gt; conf (in our internal repository) anyway pulls in a lot of various Spring jars we don&amp;#8217;t need, so we&amp;#8217;re going to try and use &lt;code&gt;artifact&lt;/code&gt; to cut that down some.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Add just an &lt;code&gt;artifact&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; /&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime, test: no spring artifacts&lt;/li&gt;

&lt;li&gt;sources: web &lt;em&gt;jar&lt;/em&gt; (not sources)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wtf? Ivy docs on &lt;a href='http://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency-artifact.html'&gt;artifact&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;#8220;By default, if no (artifact) configuration is specified, artifacts specification applies to all master configurations.&amp;#8221;&lt;/p&gt;

&lt;p&gt;What is a &amp;#8220;master configuration? Ivy docs on &lt;a href='http://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency.html'&gt;dependency&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;#8220;This mapping (&lt;code&gt;conf&lt;/code&gt; attribute of &lt;code&gt;dependency&lt;/code&gt; tag) indicates which configurations of the dependency are required in which configurations of the current module, also called master configurations.&amp;#8221;&lt;/p&gt;

&lt;p&gt;So, due to &lt;code&gt;defaultconf=&amp;quot;default;sources&amp;quot;&lt;/code&gt;, those are our &amp;#8220;master configurations&amp;#8221; for this artifact, and the web &lt;em&gt;jar&lt;/em&gt; artifact is put in both the default and sources confs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take away:&lt;/strong&gt; Leaving off &lt;code&gt;artifact&lt;/code&gt;&amp;#8217;s &lt;code&gt;conf&lt;/code&gt; attribute puts the artifact is any master configuration, which is probably what you want. Add a &lt;code&gt;conf&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Add an &lt;code&gt;artifact&lt;/code&gt; tag with &lt;code&gt;conf&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; conf=&amp;quot;default&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime, test: no spring artifacts&lt;/li&gt;

&lt;li&gt;sources: &lt;em&gt;all spring sources&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wtf? Ivy docs on &lt;a href='http://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency-artifact.html'&gt;artifact&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;#8220;do not forget that if you do not specify any specification for a particular configuration (none of the artifact&amp;#8217;s confs include the master configuration) then no specification will apply for this configuration and it will be resolved not taking into account any specification.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Since we used &lt;code&gt;conf=default&lt;/code&gt; but had no &lt;code&gt;conf=sources&lt;/code&gt; anywhere, sources fell back to using the default mapping, and pulled in all sources artifacts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take away&lt;/strong&gt;: If you add an &lt;code&gt;artifact&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt;, set the parent &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt; to include only those confs that you&amp;#8217;ve mapped.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Add an &lt;code&gt;artifact&lt;/code&gt; tag with &lt;code&gt;conf&lt;/code&gt; attribute and &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot; conf=&amp;quot;default&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; conf=&amp;quot;default&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime, test: no spring artifacts&lt;/li&gt;

&lt;li&gt;sources: no spring artifacts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Add two &lt;code&gt;artifact&lt;/code&gt; tags with &lt;code&gt;conf&lt;/code&gt; attributes:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; conf=&amp;quot;default&amp;quot;/&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web-sources&amp;quot; type=&amp;quot;sources&amp;quot; ext=&amp;quot;jar&amp;quot; conf=&amp;quot;sources&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime, test: no spring artifacts&lt;/li&gt;

&lt;li&gt;sources: web sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected. All master configurations had &lt;code&gt;artifact&lt;/code&gt; tag overrides, so none of them (&lt;code&gt;master&lt;/code&gt; or &lt;code&gt;sources&lt;/code&gt;) fell back to their default mapping.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Add two &lt;code&gt;artifact&lt;/code&gt; tags with one non-&amp;#8220;master&amp;#8221; &lt;code&gt;conf&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; conf=&amp;quot;default&amp;quot;/&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.test&amp;quot; conf=&amp;quot;test&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime: no spring artifacts&lt;/li&gt;

&lt;li&gt;test: &lt;em&gt;no&lt;/em&gt; spring artifacts&lt;/li&gt;

&lt;li&gt;sources: all spring sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wtf? Ivy docs on &lt;a href='http://ant.apache.org/ivy/history/latest-milestone/ivyfile/dependency-artifact.html'&gt;artifact&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;conf&lt;/code&gt; attribute is &amp;#8220;comma separated list of the &lt;em&gt;master configurations&lt;/em&gt; in which this artifact should be included.&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test&lt;/code&gt; is not a master configuration, so it is essentially ignored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take away:&lt;/strong&gt; if you add an &lt;code&gt;artifact&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt;, ensure it is a master configuration, or just add it to the &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt; to make sure&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Two &lt;code&gt;artifact&lt;/code&gt; tags, both with &amp;#8220;master&amp;#8221; &lt;code&gt;conf&lt;/code&gt; attributes:&lt;/p&gt;

&lt;pre class='brush:xml'&gt;&lt;code&gt;&amp;lt;dependency org=&amp;quot;springframework&amp;quot; name=&amp;quot;spring&amp;quot;
    rev=&amp;quot;3.0.6.RELEASE&amp;quot; conf=&amp;quot;default,test&amp;quot;&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.web&amp;quot; conf=&amp;quot;default&amp;quot;/&amp;gt;
  &amp;lt;artifact name=&amp;quot;org.springframework.test&amp;quot; conf=&amp;quot;test&amp;quot;/&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pulls in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default: web jar&lt;/li&gt;

&lt;li&gt;buildtime: no spring artifacts&lt;/li&gt;

&lt;li&gt;test: test jar&lt;/li&gt;

&lt;li&gt;sources: no spring sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected, given the behavior discovered so far.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='note_on_transitive_dependencies'&gt;Note on Transitive Dependencies&lt;/h2&gt;

&lt;p&gt;Just a quick note, but while &lt;code&gt;artifact&lt;/code&gt; let&amp;#8217;s you pick apart an upstream project&amp;#8217;s artifacts for only those you want, this doesn&amp;#8217;t have any affect on the transitive dependencies you inherit from the project&amp;#8211;those are still based strictly on configurations.&lt;/p&gt;

&lt;p&gt;Usually this just means you&amp;#8217;ll end up pulling in more transitive dependencies than you need, but I think it re-enforces the notion the &lt;code&gt;artfact&lt;/code&gt; override is a hack and that finding a way to do configuration-to-configuration mappings is a better way to do things with Ivy.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Don&amp;#8217;t use &lt;code&gt;artifact&lt;/code&gt; tags. If you do, always specify &lt;em&gt;both&lt;/em&gt; the &lt;code&gt;dependency&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt; and the &lt;code&gt;artifact&lt;/code&gt; &lt;code&gt;conf&lt;/code&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Abstracting Types Across Domains</title>
   <link href="http://draconianoverlord.com/2012/06/16/types-across-domains.html"/>
   <updated>2012-06-16T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/06/16/types-across-domains</id>
   <content type="html">&lt;h1 id='abstracting_types_across_domains'&gt;Abstracting Types Across Domains&lt;/h1&gt;

&lt;p&gt;As a &lt;a href='/2010/11/24/why-im-a-static-typing-bigot.html'&gt;static typing bigot&lt;/a&gt;, I like static types. But I&amp;#8217;m also pragmatic, and realize there are times when types get in the way, annoy programmers, and drive them to use Ruby.&lt;/p&gt;

&lt;p&gt;One particular instance of &amp;#8220;when types suck&amp;#8221; that I&amp;#8217;m acutely aware of is when it leads to an inability, or annoying difficulty, to have abstractions and generic infrastructure.&lt;/p&gt;

&lt;h2 id='application_code_vs_infrastructure_code'&gt;Application Code vs. Infrastructure Code&lt;/h2&gt;

&lt;p&gt;To explain my point, it&amp;#8217;s useful to think of a typically program as (at least) two parts: the application code and the infrastructure code.&lt;/p&gt;

&lt;p&gt;What exactly is &amp;#8220;application code&amp;#8221; vs. &amp;#8220;infrastructure code&amp;#8221; changes depending on the application, but for certain classes of application&amp;#8217;s, there are fairly standard understandings. E.g. in a line-of-business application, application code is your business logic, which is usually entity-specific, while infrastructure code is your persistence logic, which is (hopefully) entity-generic.&lt;/p&gt;

&lt;p&gt;For example, in business logic, the programmer is intrinsically reasoning about business-/application-specific details. E.g. introducing a method &lt;code&gt;doSomeCalculation&lt;/code&gt; and then calling it later from another part of code. Here is it beneficial that each entity is a distinct type with distinct properties and methods, as it facilitates organizing and reasoning about (and type-checking) the code. So you&amp;#8217;ll have &lt;code&gt;Employee&lt;/code&gt;, &lt;code&gt;Employer&lt;/code&gt;, etc., for each entity in your application domain.&lt;/p&gt;

&lt;p&gt;Contrast this with the infrastructure logic, say the persistence layer, which is more generic&amp;#8211;&amp;#8220;fetch entity X&amp;#8221;, &amp;#8220;save entity X&amp;#8221;, etc. for each entity in the system. Once you&amp;#8217;ve solve it for entity X, there generally isn&amp;#8217;t anything special about doing it for entity Y (ideally). Here, you generally don&amp;#8217;t want distinct types with distinct properties, but instead your domain is based on on higher-level abstractions like types of just &lt;code&gt;Entity&lt;/code&gt; and &lt;code&gt;Property&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='so_what_about_types'&gt;So, What about Types?&lt;/h2&gt;

&lt;p&gt;My assertion is that types are for programmers.&lt;/p&gt;

&lt;p&gt;Historically, avoiding the runtime cost of dynamic method dispatch was important for performance, but I think it&amp;#8217;s accepted that lately VMs in even supposedly static languages like Java (which actually has a lot of polymorphic dynamic dispatch) show that, for most applications, dynamic vs. static typing is a wash.&lt;/p&gt;

&lt;p&gt;But that&amp;#8217;s fine, performance aside, I like types for the benefit to the programmer. Each method call becomes a mini-unit test that the other side is fulfilling at least some minimal contract in agreeing to be called.&lt;/p&gt;

&lt;p&gt;For business logic, this means you want your types to model the business domain, and have all of this nit-picky static checking against the distinct business objects and methods.&lt;/p&gt;

&lt;p&gt;However, once you move into infrastructure code, you want your level of abstraction to go up&amp;#8211;instead of working against specific entities (&lt;code&gt;Employee&lt;/code&gt; or &lt;code&gt;Employer&lt;/code&gt;), you want your types to model the infrastructure domain, e.g. &lt;code&gt;Entity&lt;/code&gt; or &lt;code&gt;Table&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As soon as you&amp;#8217;ve done this, you can generically write your infrastructure. Which means less boilerplate, less lines of code, and less bugs. Awesome.&lt;/p&gt;

&lt;h2 id='declaring_types_in_multiple_domains'&gt;Declaring Types in Multiple Domains&lt;/h2&gt;

&lt;p&gt;Seems obvious, right? I think it is in principle. So where does it go wrong?&lt;/p&gt;

&lt;p&gt;I think one of the weakness of static typing systems is that it&amp;#8217;s hard to declare types in multiple domains.&lt;/p&gt;

&lt;p&gt;Or, more specifically, to succinctly declare a single type (say &lt;code&gt;Employee&lt;/code&gt;) as a member of two domains (e.g. as a domain object in the application layer and an entity in the persistence layer) in a elegant fashion, such that each domain has the information about that type that it needs.&lt;/p&gt;

&lt;p&gt;Usually when you declare a type like &lt;code&gt;Employee&lt;/code&gt;, you&amp;#8217;re thinking of your business domain. But you&amp;#8217;re also implicitly adding &lt;code&gt;Employee&lt;/code&gt; to the persistence domain. And so while you want distinct methods (&lt;code&gt;getName&lt;/code&gt;, &lt;code&gt;setName&lt;/code&gt;, &lt;code&gt;doBilling&lt;/code&gt;) for the business domain, you want a generic list of properties (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, etc.) for the persistence domain.&lt;/p&gt;

&lt;p&gt;Maintaining both these (distinct classes/methods that are yet also somehow generic) is not something that I think static languages do very well. But it&amp;#8217;s very important for non-trivial codebases.&lt;/p&gt;

&lt;p&gt;If you fail to capture this abstraction, you typically wind up with boilerplate as you have to maintain the type in each of the relevant domains by hand.&lt;/p&gt;

&lt;p&gt;(Tangentially, I&amp;#8217;ve seen several Java enterprise applications fall into this trap. Usually it&amp;#8217;s from an amateur architect who&amp;#8217;s built a custom stack, and enough of a prototype that &amp;#8220;works great&amp;#8221;&amp;#8230;for 2-3 entities. But without abstraction, there are garish violations of DRY as otherwise simple tasks like adding or modifying entities requires modifications to multiple layers of the code (business, persistence, etc.) and it just doesn&amp;#8217;t scale.)&lt;/p&gt;

&lt;h2 id='metaprogramming_to_the_rescue'&gt;Meta-Programming to the Rescue&lt;/h2&gt;

&lt;p&gt;The boilerplate approach is usually untenable, so we reach for the programmer&amp;#8217;s best friend: automation. Meta-programming is usually a great way avoid the boilerplate duplication and project a single conceptual type into multiple domains.&lt;/p&gt;

&lt;p&gt;Several implementation options that come to mind are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Annotations&lt;/p&gt;

&lt;p&gt;For example, when the declaring the types for entities in the business domain, e.g. &lt;code&gt;class Employee&lt;/code&gt;, you can add an annotation, e.g. &lt;code&gt;@Entity&lt;/code&gt;, that acts as metadata for the persistence domain. You similarly annotate fields with &lt;code&gt;@Persistent&lt;/code&gt;, or what not.&lt;/p&gt;

&lt;p&gt;I suppose technically this is getting a single type mapped into both domains&amp;#8211;my issue, elaborated on in the &amp;#8220;Annotations Suck&amp;#8221; section of &lt;a href='/2012/03/21/joist-orm.html'&gt;Joist, the Java ORM for Me&lt;/a&gt;, is that it is still prone to boilerplate tedium, especially as annotation parameters get more plentiful, configurable, and hence confusing.&lt;/p&gt;

&lt;p&gt;Annotations can be accessed two ways, one via runtime reflection and the other via compile-time annotation processors. Both seem fine, though I generally prefer the compile-time aspect of annotation processors (of course)&amp;#8211;to me it seems like accessing them as runtime increases your risk that the annotations were mapped incorrectly.&lt;/p&gt;

&lt;p&gt;(Tagentially, I went on quite the annotation processor bender for awhile, but am lately not favoring them as much because the Eclipse support is (very) occassionally wonky, and you&amp;#8217;re limited to only generating new code.)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Old-school reflection&lt;/p&gt;

&lt;p&gt;Even in static languages like Java, it&amp;#8217;s possible even without annotations to use reflection to interrogate an instance of a type from one domain and sometimes implictly project it into the other domain. E.g. look at an instances &lt;code&gt;getXxx&lt;/code&gt; methods and infer the entity&amp;#8217;s properties.&lt;/p&gt;

&lt;p&gt;The limitation here is that, given it&amp;#8217;s just reflection, you&amp;#8217;re limited to the information the reflection API gives you, which is obviously very implementation-oriented&amp;#8211;everything is in terms of &lt;code&gt;Method&lt;/code&gt;s and &lt;code&gt;Constructor&lt;/code&gt;s, etc., instead of your persistence domain. So you may not have all of the metadata necessary to do the implicit mapping. (Granted, this is basically what annotations solve.)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Code generation of types/metadata for one or multiple domains from a master data source.&lt;/p&gt;

&lt;p&gt;E.g. &lt;a href='http://joist.ws'&gt;Joist&lt;/a&gt; generates both domain objects for the business domain plus metadata information for the persistence domain from a single data source, the application&amp;#8217;s relational database schema.&lt;/p&gt;

&lt;p&gt;This can work really well, and is probably my favorite approach, but takes some up-front investment to build.&lt;/p&gt;

&lt;p&gt;And you might run into limitations based on what information can be stored in your master schema (e.g. relational schemas can only handle simple constraints like required, max length, etc.).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Runtime meta-programming in dynamic languages.&lt;/p&gt;

&lt;p&gt;Dynamic languages really shine here, and I think the ease of meta-programming has really helped their popularity. E.g. see how ActiveRecord leverages Ruby&amp;#8217;s runtime class modification to take a generic list of fields (from the persistence domain/schema) and project it into the business domain as getters/setters.&lt;/p&gt;

&lt;p&gt;I think the reason dynamic languages can map a single type into multiple domains so easily is that, for the most part, dynamic objects are just maps of properties, so each layer can add it&amp;#8217;s own magic to the instance however it wants. Couple this with the ability to use hooks like replacing methods with new implementations that do magic and then call the old ones, basically aspect-oriented programming, and you&amp;#8217;ve got a pretty powerful way contort objects to your whim.&lt;/p&gt;

&lt;p&gt;&amp;#8230;if only that magic could be type checked. :-)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Compile-time meta-programming in static languages.&lt;/p&gt;

&lt;p&gt;I.e. Scala macros FTW. I think there is a lot of promise in compile-time macros to handle maintaining types in separate domains. Unfortunately I don&amp;#8217;t have a lot of experience with this option yet, so we&amp;#8217;ll see how it goes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='example_rich_clients'&gt;Example: Rich Clients&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve been mulling over this type abstraction problem within the context of client/server communication. E.g. between a AJAX client and the backend server.&lt;/p&gt;

&lt;p&gt;I think it&amp;#8217;s fair to characterize the AJAX client as having application logic, and a place where you want an &lt;code&gt;Employee&lt;/code&gt; type, &lt;code&gt;Employer&lt;/code&gt; type, etc. But the serialization code to the server is very much infrastructure code, and not something you want to redo all of the time.&lt;/p&gt;

&lt;p&gt;Since the AJAX client is rich, the application types are typically rich models, that fire events on property change, and all that fancy stuff. However, none of this richness should be serialized over the wire to the server, as it&amp;#8217;s meaningless to the server-side.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And&lt;/em&gt;, while I won&amp;#8217;t address it here, the server-side typically has it&amp;#8217;s own backend domain objects that it wants to map client requests to/from. So, for an entity Employee, you actually have a variety of layers involved: server-side peristence (e.g. to the database), server-side application, server-side serialization, client-side serialization, and finally client-side application. Fun!&lt;/p&gt;

&lt;p&gt;So, ignoring the server-side issues, there are a few client-side approaches:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://angularjs.org'&gt;AngularJS&lt;/a&gt; takes an interesting approach by avoiding the client-side serialization vs. model problem all together. Its models are the very same simple JavaScript objects that go to/from the server (assuming JSON).&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not entirely sure how this scales up to creating/maintaining non-trivial application logic. You lose the ability to hang extra methods and rules off the model types (&lt;code&gt;Employee&lt;/code&gt;/&lt;code&gt;Employer&lt;/code&gt;/etc.) as they are basically just DTOs/JavaScript hash objects, so you have to maintain this logic someplace else. Which is less OO, I think, though not necessarily bad. I need to look into how they handle this more.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.tessell.org'&gt;Tessell&lt;/a&gt; uses rich models that wrap simple JavaScript/DTO objects.&lt;/p&gt;

&lt;p&gt;Tessell&amp;#8217;s models wrap DTOs because, being GWT-based, even incoming/outgoing AJAX requests are typically represented using type-safe objects. If using GWT-RPC, this means both your server-side and client-side can reuse the same DTOs, which adds another safety blanket of cross-layer type checking to the application.&lt;/p&gt;

&lt;p&gt;However, it does mean maintaining types in two domains&amp;#8211;an &lt;code&gt;EmployeeDto&lt;/code&gt; (for the serialization domain) and an &lt;code&gt;EmployeeModel&lt;/code&gt; (for the application domain).&lt;/p&gt;

&lt;p&gt;Thankfully &lt;a href='http://github.com/stephenh/dtonator'&gt;dtonator&lt;/a&gt; provides some Tessell-specific code generation to minimize the DTO to-/from-model boilerplate. And, as a bonus, it also maps server-side domain objects onto the DTOs as well, so helps solve server-side cross-domain mapping as well.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;More dynamic language magic? I have admittedly not looked into the implementation details of &lt;a href='http://backbonejs.org'&gt;Backbone&lt;/a&gt; or &lt;a href='http://knockoutjs.com'&gt;Knockout&lt;/a&gt;, and how they map JSON to/from their models. From the examples I&amp;#8217;ve seen, it seems suitably slick/magical, I&amp;#8217;m just not sure how.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Ah, I almost forgot &lt;a href='http://www.meteor.com/'&gt;Meteor&lt;/a&gt;. Talk about magic. It takes the very provocative approach of reading that line where I listed all of the layers involved (multiple server-side domains, multiple client-side domains), and says &amp;#8220;screw it&amp;#8221;, and basically just does all of that for you.&lt;/p&gt;

&lt;p&gt;On one hand, it seems very unique; on another, it seems vaguely familiar to what OO-databases might have tried to do back in the 90s (automatically distributed objects). But I have nothing against trying again, especially with today&amp;#8217;s technologies (databases, servers, browsers, etc.) all being that much more advanced.&lt;/p&gt;

&lt;p&gt;It will be interesting to see how Meteor plays out&amp;#8211;it certainly seems to have the promise of drastically increasing developer productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='example_sql'&gt;Example: SQL&lt;/h2&gt;

&lt;p&gt;SQL is a tangential example of application- vs. infrastructure-code. Well, primarily in the context of thinking about client-/server-communication (not in the implementation of the database itself).&lt;/p&gt;

&lt;p&gt;While SQL the language has aspects of static typing (explicit tables, properties, etc.), the over-the-wire protocol itself is generic (just strings for commands and relations for results).&lt;/p&gt;

&lt;p&gt;This lets the infrastructure code (JDBC drivers, etc.) be implemented just once and reused without any knowledge of the application domain.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve always had a special hate for boilerplate, but I don&amp;#8217;t think I&amp;#8217;d explicitly organized my thinking around the concepts of the different domains in a codebase. Perhaps this seems silly, as N-layer/N-tier architectures are all that I&amp;#8217;ve ever really worked in.&lt;/p&gt;

&lt;p&gt;Regardless, having separate domains (application vs. infrastructure, etc.) within a code base is, in my opinion, key to scaling a non-trivial application.&lt;/p&gt;

&lt;p&gt;The tricky part is maintaining the types, dependencies, and mappings between domains in an elegant fashion. There are various ways of doing this, but, AFAIK, no silver bullets. Good luck.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ErraiUI Initial Impression</title>
   <link href="http://draconianoverlord.com/2012/06/16/errai-ui-initial-impression.html"/>
   <updated>2012-06-16T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/06/16/errai-ui-initial-impression</id>
   <content type="html">&lt;h1 id='erraiui_initial_impression'&gt;ErraiUI Initial Impression&lt;/h1&gt;

&lt;p&gt;JBoss&amp;#8217;s &lt;a href='http://www.jboss.org/errai'&gt;Errai&lt;/a&gt; project has always been on my list of GWT technologies to play with.&lt;/p&gt;

&lt;p&gt;AFAICT it&amp;#8217;s original/core purpose was sending events not just between the client and server, but between clients as well (via the server, I assume). This seems pretty useful, but I just hadn&amp;#8217;t had a need for it yet.&lt;/p&gt;

&lt;p&gt;Lately it seems like Errai&amp;#8217;s scope is growing&amp;#8211;it&amp;#8217;s becoming more about &amp;#8220;bringing JEE to the client-side&amp;#8221; instead of &amp;#8220;just an EventBus&amp;#8221;. As a non-JEE user, I&amp;#8217;m not entirely sure this is a good idea, but I suppose for existing JEE users it makes more sense.&lt;/p&gt;

&lt;p&gt;The latest feature to be &lt;a href='https://twitter.com/JBossMike/status/214066336375111680'&gt;announced&lt;/a&gt; is ErraiUI, an approach to HTML templates in GWT that is reminiscent of UiBinder.&lt;/p&gt;

&lt;p&gt;Since I&amp;#8217;m watching the &lt;a href='http://vimeo.com/44141164'&gt;demo video&lt;/a&gt; now, I thought I&amp;#8217;d write up a few thoughts.&lt;/p&gt;

&lt;p&gt;If you want to jump right into their example code that&amp;#8217;s shown in the video, here are links to their GitHub &lt;a href='https://github.com/lincolnthree/errai-ui-demo'&gt;demo project&lt;/a&gt; for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href='https://github.com/lincolnthree/errai-ui-demo/blob/master/src/main/java/org/jboss/errai/ui/demo/client/local/App.html'&gt;App.html&lt;/a&gt; template&lt;/li&gt;

&lt;li&gt;The &lt;a href='https://github.com/lincolnthree/errai-ui-demo/blob/master/src/main/java/org/jboss/errai/ui/demo/client/local/App.java'&gt;App.java&lt;/a&gt; component&lt;/li&gt;

&lt;li&gt;The &lt;a href='https://github.com/lincolnthree/errai-ui-demo/blob/master/src/main/java/org/jboss/errai/ui/demo/client/local/Spotlight.java'&gt;Spotlight.java&lt;/a&gt; sub-component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, my thoughts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Their pure HTML templates are pretty spiffy.&lt;/p&gt;

&lt;p&gt;The de facto GWT template library, UiBinder, is HTML-&lt;em&gt;ish&lt;/em&gt;, but really XML (not even XHTML), so you can&amp;#8217;t just open it up in a browser. Besides being XML, it has various GWT markup (&lt;code&gt;gwt:TextBox&lt;/code&gt;, &lt;code&gt;ui:field&lt;/code&gt;) thrown in that won&amp;#8217;t mean anything until rendered.&lt;/p&gt;

&lt;p&gt;Having worked a lot with UiBinder, I&amp;#8217;ve gotten used to UiBinder&amp;#8217;s almost-HTML templates and no longer think it&amp;#8217;s a big deal. But I can why see sticking with pure HTML templates would be a good idea.&lt;/p&gt;

&lt;p&gt;One cool feature of ErraiUI is that&amp;#8217;ll strip headers/footers from your &lt;code&gt;.html&lt;/code&gt; template file, so if you have a mockup from your designer that looks like:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;!--various js/style stuff--&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;!--common static header--&amp;gt;
    &amp;lt;div data-field=&amp;quot;template&amp;quot;&amp;gt;
      &amp;lt;!-- the HTML you really care about is here --&amp;gt;
    &amp;lt;!--common static footer--&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using the &lt;code&gt;@Templated(&amp;quot;#template&amp;quot;)&lt;/code&gt; annotation, ErraiUI will find the &lt;code&gt;data-field=template&lt;/code&gt; element, use it as the root of your component&amp;#8217;s template, and drop all of the HTML before/after it.&lt;/p&gt;

&lt;p&gt;This makes a lot of sense, because you usually don&amp;#8217;t want this header/footer cruft in your component itself (the styles/window dressing/etc. have already been drawn when your app loaded), but it&amp;#8217;s very handy to leave it there for designers/developers to just pop open in a browser and see what the HTML renders like, sans GWT.&lt;/p&gt;

&lt;p&gt;This seems to be their biggest feature and, kudos, it&amp;#8217;s pretty cool.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Another awesome feature is that they can split a single &lt;code&gt;.html&lt;/code&gt; file up across multiple components.&lt;/p&gt;

&lt;p&gt;In UiBinder, if you have a parent component with various child components, each child needs it&amp;#8217;s own new &lt;code&gt;ui.xml&lt;/code&gt; file, as there is no way to get separate/multiple &lt;code&gt;UiBinder&lt;/code&gt; instances from a single &lt;code&gt;ui.xml&lt;/code&gt; file. So you end up with &lt;code&gt;Parent.ui.xml&lt;/code&gt; and a separate &lt;code&gt;ParentChild.ui.xml&lt;/code&gt; containing just the (typically few) lines of child markup.&lt;/p&gt;

&lt;p&gt;ErraiUI templates, on the other hand, allows you have to take a single static template like:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;div data-field=&amp;quot;parentTemplate&amp;quot;&amp;gt;
  &amp;lt;!-- some stuff --&amp;gt;
  &amp;lt;div data-field=&amp;quot;children&amp;quot;&amp;gt;
    &amp;lt;div data-field=&amp;quot;childTemplate&amp;quot;&amp;gt;
      &amp;lt;!-- child markup --&amp;gt;
      &amp;lt;span data-field=&amp;quot;label&amp;quot;&amp;gt;Child One&amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;!--
        markup for another child the designer included
        for illustration, but stripped by ErraUI
      --&amp;gt;
      &amp;lt;span&amp;gt;Child Two&amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can have two separate component classes, &lt;code&gt;Parent&lt;/code&gt; annotated with &lt;code&gt;@Templated(&amp;quot;#parentTemplate&amp;quot;)&lt;/code&gt; and &lt;code&gt;Child&lt;/code&gt; annotated with &lt;code&gt;@Templated(&amp;quot;Parent.html#childTemplate&amp;quot;)&lt;/code&gt; getting their respective markup from the same file.&lt;/p&gt;

&lt;p&gt;This is great&amp;#8211;I&amp;#8217;ve personally wanted to do this with UiBinder for awhile. As usual with UiBinder, you get used to not being able to do it. But it is annoying to make a new &lt;code&gt;ui.xml&lt;/code&gt; file every time you need to separate out a child&amp;#8217;s markup from its parent&amp;#8217;s markup.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Despite ErraiUI&amp;#8217;s otherwise awesome focus on pure/static HTML templates, sometimes abstracting boilerplate markup is handy, and I&amp;#8217;m curious how/if they&amp;#8217;ll handle it.&lt;/p&gt;

&lt;p&gt;For example, Twitter &lt;a href='http://twitter.github.com/bootstrap/'&gt;Bootstrap&lt;/a&gt; is great, but even if you&amp;#8217;re using it, once you get into non-trivial HTML forms, there is a lot of markup boilerplate. Each field needs a place for the label, the help text, the validation error, the input itself, all with the right CSS classes/HTML structure, etc.&lt;/p&gt;

&lt;p&gt;The markup for a complete form field (just one field), might look something like (making this up as I go):&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;{style.controlGroup}&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;{style.controlLabel&amp;quot;&amp;gt;
    &amp;lt;span&amp;gt;label&amp;lt;/span&amp;gt;
    &amp;lt;i class=&amp;quot;{style.helpIcon}&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;{style.control}&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;{style.errors}&amp;quot;&amp;gt;
    errors go here
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which isn&amp;#8217;t that bad.&lt;/p&gt;

&lt;p&gt;But then it&amp;#8217;s copy/pasted for every field in the form. And then copy/pasted for every field &lt;em&gt;in the application&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is fine for static mockups&amp;#8211;being static, they have to work this way.&lt;/p&gt;

&lt;p&gt;But once in the application, I think it&amp;#8217;s another form of boilerplate if you have more than a handful of form fields. Markup like this, that is very commonly used but also non-trivial, should be abstracted into a component so it can be defined once and maintained in a single place.&lt;/p&gt;

&lt;p&gt;With UiBinder, you can make an application-specific &lt;code&gt;TextBox&lt;/code&gt; or &lt;code&gt;TextLine&lt;/code&gt; component and then in your forms do something like:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;form&amp;gt;
  &amp;lt;app:TextLine ui:field=&amp;quot;name&amp;quot;/&amp;gt;
  &amp;lt;app:TextLine ui:field=&amp;quot;title&amp;quot;/&amp;gt;
  &amp;lt;app:TextLine ui:field=&amp;quot;description&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which, personally, I think is a real boon for reducing boilerplate and increasing developer productivity.&lt;/p&gt;

&lt;p&gt;Unfortunately, it doesn&amp;#8217;t mesh at all with ErraiUI&amp;#8217;s approach of templates being completely static to facilitate WYSIWYG.&lt;/p&gt;

&lt;p&gt;Part of ErraiUI&amp;#8217;s philosophy, AFAICT, is that you no longer need to hack up your designer&amp;#8217;s mockups to use their HTML templates for your application. Which, on one hand is great; I&amp;#8217;ve done that hacking before, and it&amp;#8217;s tedious. But, on the other hand, I think there are benefits, namely being able to bring abstractions like components to bare to reduce duplication.&lt;/p&gt;

&lt;p&gt;&amp;#8230;but then, yeah, once your template is using not-just-static-HTML abstractions, there goes WYSIWYG. So, who knows, pick your trade off, I guess.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;ErraiUI seems like slightly less boilerplate than UiBinder, primarily because there is no &lt;code&gt;GWT.create&lt;/code&gt; in sight.&lt;/p&gt;

&lt;p&gt;I would not get overly excited about this, however, as it just means the &lt;code&gt;GWT.create&lt;/code&gt; is hidden behind some annotations. It is a few less lines of code, and I&amp;#8217;ll readily admit much cleaner, but the coupling (to deferred binding magic) is still there. Just better hidden.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Which brings me to my biggest question with ErraiUI: how do you do MVP?&lt;/p&gt;

&lt;p&gt;AFAICT, ErraiUI heavily relies on the Errai JEE-style injection infrastructure. Having not used Errai before, I&amp;#8217;m not sure, but would all of the injection/data-binding work in a unit test? I&amp;#8217;m kinda guessing not.&lt;/p&gt;

&lt;p&gt;Even if did, the demo code at least directly uses GWT&amp;#8217;s &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;TextBox&lt;/code&gt; classes, which can&amp;#8217;t be unit tested outside of a &lt;code&gt;GWTTestCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Both &lt;a href='https://developers.google.com/web-toolkit/articles/mvp-architecture'&gt;traditional MVP&lt;/a&gt; and &lt;a href='http://www.tessell.org'&gt;Tessell&lt;/a&gt; use a different approach, that has the application refer to interfaces, e.g. &lt;code&gt;HasText&lt;/code&gt; or &lt;code&gt;IsTextBox&lt;/code&gt;, which can be doubled out at test time. This gets you awfully quick tests, and is something I&amp;#8217;d be really hard pressed to give up.&lt;/p&gt;

&lt;p&gt;Perhaps the intention with ErraiUI is that you could still do MVP, but ErraiUI is only concerned with your view implementation itself, and not the higher-level presenter. I would say this really makes sense, but the demo had included data binding logic, which is something I generally like to have be the presenter&amp;#8217;s responsibility so it can be tested.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;As a final nit, ErraiUI still involves basically duplicating the fields within the template into the Java class.&lt;/p&gt;

&lt;p&gt;This was one of my original frustrations with UiBinder: after I add &lt;code&gt;&amp;lt;input type=text ... /&amp;gt;&lt;/code&gt; to the template, I have to also add a &lt;code&gt;private TextBox text;&lt;/code&gt; to my Java class.&lt;/p&gt;

&lt;p&gt;In ErraiUI&amp;#8217;s case, it means another field (&lt;code&gt;private TextBox text&lt;/code&gt;) and at least two annotations (&lt;code&gt;@Injected&lt;/code&gt; and &lt;code&gt;@DataField)&lt;/code&gt;, potentially a 3rd annotation (&lt;code&gt;@SuppressWarnings&lt;/code&gt;) if you don&amp;#8217;t directly access the field and are using their data binding.&lt;/p&gt;

&lt;p&gt;(Tangentially, how weird is that? A field so magical you have to add &lt;code&gt;@SuppressWarnings&lt;/code&gt;? To me this is another indication the code is essentially non-working until GWT compile/deferred bindings runs, so can&amp;#8217;t be unit tested. GWT&amp;#8217;s deferred bindings are great, but I think within the GWT ecosystem are overly used when more traditional code generation techniques (that let the user&amp;#8217;s code actually see the output) would be more appropriate. Yet another plug, but see &lt;a href='http://www.tessell.org'&gt;Tessell&lt;/a&gt; for what I mean.)&lt;/p&gt;

&lt;p&gt;Nonetheless, since ErraiUI is not doing MVP, this template/Java re-declaration of fields isn&amp;#8217;t that bad, because you&amp;#8217;re also not updating presenter/view interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is a lot I like about ErraiUI. I can tell they had a specific set of goals (using static/designer-produced mockups as much as possible) and did a good job achieving them.&lt;/p&gt;

&lt;p&gt;Admittedly, I like &lt;a href='http://www.tessell.org'&gt;Tessell&lt;/a&gt;&amp;#8217;s approach, to both the view and view/model data binding, enough that I&amp;#8217;m not going to jump to ErraiUI anytime soon.&lt;/p&gt;

&lt;p&gt;Although it would be interesting to look into replacing UiBinder within Tessell&amp;#8217;s stack with ErraiUI. Especially for having multiple components driven from one template file. If Tessell&amp;#8217;s code generation saw an ErraIUI &lt;code&gt;.html&lt;/code&gt; file, it could MVP-ize it by creating an interface-plus-implementation based on the HTML tags with &lt;code&gt;data-field&lt;/code&gt; attributes. Not entirely sure how it would recognize sub-components given they also use &lt;code&gt;data-field&lt;/code&gt;. But seems like it could work.&lt;/p&gt;

&lt;p&gt;Just the development of ErraiUI itself is also interesting&amp;#8211;it shows that RedHat/JBoss are quite willing to step away from stock GWT libraries like UiBinder and innovate their own solutions. Which is great. It&amp;#8217;s awesome to see them putting this much investment in the GWT ecosystem.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What's Wrong with a Schema?</title>
   <link href="http://draconianoverlord.com/2012/05/08/whats-wrong-with-a-schema.html"/>
   <updated>2012-05-08T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/05/08/whats-wrong-with-a-schema</id>
   <content type="html">&lt;h1 id='whats_wrong_with_a_schema'&gt;What&amp;#8217;s Wrong with a Schema?&lt;/h1&gt;

&lt;p&gt;Lately I&amp;#8217;ve been wondering why schema-less databases are so popular lately.&lt;/p&gt;

&lt;p&gt;Most any NoSQL store is schema-less. And while perhaps schema-less-ness is an integral part of NoSQL (e.g. most NoSQL databases are just opaque key/value stores), I would assert it&amp;#8217;s an orthogonal concern, and that document-oriented databases, e.g. &lt;a href='http://www.mongodb.org/'&gt;MongoDB&lt;/a&gt;, could arguably have a schema.&lt;/p&gt;

&lt;p&gt;However, MongoDB doesn&amp;#8217;t just say it&amp;#8217;s schema-less for technical reasons related to being a NoSQL store, it actually touts its lack of a schema as a benefit, claiming it is &amp;#8220;agile&amp;#8221; and offers &amp;#8220;simplicity and power&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I find all of this confusing, as I actually &lt;em&gt;want&lt;/em&gt; a schema.&lt;/p&gt;

&lt;p&gt;I think the database enforcing a basic level of data consistency is a good thing. Granted, there will always invariants that the database cannot enforce, sans stored procedures. So, at some point you have to rely on most/all non-trivial database writes coming via your domain objects/business logic.&lt;/p&gt;

&lt;p&gt;Nonetheless, for basic constraints (column length, not null, unique, foreign keys, etc.), it seems like a generally good idea for the database to do these checks for you.&lt;/p&gt;

&lt;p&gt;This post is a general outline of my thoughts on the issue.&lt;/p&gt;

&lt;h2 id='coordinating_migrations_sucks_but_thats_good'&gt;Coordinating Migrations Sucks, But That&amp;#8217;s Good&lt;/h2&gt;

&lt;p&gt;I think one primary aspect of schemas that people find annoying is having to coordinate releases of multiple applications around when the database will have a new schema version applied.&lt;/p&gt;

&lt;p&gt;I agree; this is annoying. However, I think it&amp;#8217;s misguided to blame the schema for this. It&amp;#8217;s not the core issue. The core issue is multiple applications sharing a database. The schema just makes this contract explicit.&lt;/p&gt;

&lt;p&gt;In that regard, I think it is naive to think a schema-less database &amp;#8220;solves&amp;#8221; this issue for you. It does not make the coordination problem go away, it just makes it less visible. Now it is each application&amp;#8217;s responsibility to work sanely with both new and old versions of documents. Which means it&amp;#8217;s the responsibility of the programmer. Which means it won&amp;#8217;t happen.&lt;/p&gt;

&lt;p&gt;Perhaps I&amp;#8217;m overly pessimistic, but how many programmers version their schema-less documents? Or really remember which fields are new/renamed/changed and so, even if present for 95% of the documents, might not be there for some small subset?&lt;/p&gt;

&lt;p&gt;To really do this right, I think you&amp;#8217;d basically need to build in-application migrations that promote each document from v1 to v2 to v3, and then ensure all of your clients use the latest migrations when accessing the database. Well, and hope than any clients assuming an older schema aren&amp;#8217;t going to mess up the data written by newer clients.&lt;/p&gt;

&lt;p&gt;Perhaps this is what people do, but I haven&amp;#8217;t read of it, so I&amp;#8217;m skeptical.&lt;/p&gt;

&lt;p&gt;Granted, even if you&amp;#8217;re lacking this sort of in-application versioning diligence, obviously not every application deployment that uses a schema-less database is going to lead to disaster; I&amp;#8217;m sure most of them go quite fine.&lt;/p&gt;

&lt;p&gt;However, I still think forcing coordination of multiple deployed applications around a schema change is a &lt;em&gt;good&lt;/em&gt; aspect of schemas. It is making their coupling to each other (via the database and a shared contract of what type of data goes in it, e.g. the schema) explicit.&lt;/p&gt;

&lt;p&gt;I want to know all my applications are now being forced to use the new, same schema. Then I know they&amp;#8217;ll (generally) play nicely with each other and have at least a basic agreement on what the data should look like.&lt;/p&gt;

&lt;h2 id='accepting_downtime_for_migrations'&gt;Accepting Downtime for Migrations&lt;/h2&gt;

&lt;p&gt;Sometimes, you&amp;#8217;ll be lucky enough to have a database accessed by only a single application, so the above issue of coordinating migrations across multiple applications isn&amp;#8217;t an issue. Great!&lt;/p&gt;

&lt;p&gt;However, usually it still means taking the old version of the application down, applying the schema changes, and then bringing a new version up. So, downtime. And, yeah, downtime sucks.&lt;/p&gt;

&lt;p&gt;But really I think this is a variation of the prior point&amp;#8211;but instead of two different applications sharing a database, it&amp;#8217;s two different versions (pre-/post-upgrade) sharing the same database. Which I think has all the same potential problems as the previous case of separate applications sharing a database, in terms disagreeing what the data should look like.&lt;/p&gt;

&lt;p&gt;So, while migrations introduce a deployment complexity, I think the trade-off (that I&amp;#8217;m usually quite willing to accept) is simplicity in your application code by not having to deal with multiple older schemas that just no longer make sense in the latest version of the application.&lt;/p&gt;

&lt;p&gt;Particularly in a long-lived application, where the maintenance phase is longer than the initial development phase (as it should be in all successful projects), it seems like constantly having to think with &amp;#8220;what might the data from last month, six months, 12 months ago look like?&amp;#8221; would get tiresome.&lt;/p&gt;

&lt;p&gt;Musing further, and thinking specifically of MongoDB&amp;#8217;s assertion of &amp;#8220;schema-less == simplicity&amp;#8221;. I&amp;#8217;m sure this applies during the initial development phase&amp;#8211;when there is no production data around, and you as a developer want to put 10 rows of whatever test data you want in your local database, sure, it&amp;#8217;s simple to not have a schema.&lt;/p&gt;

&lt;p&gt;My assertion is that this initial simplicity will not bear itself out throughout the life cycle of an application, and in the long-term will actually become a burden.&lt;/p&gt;

&lt;h2 id='of_course_sometimes_schemaless_is_better'&gt;Of Course, Sometimes Schema-less is Better&lt;/h2&gt;

&lt;p&gt;Despite my general skepticism, I&amp;#8217;m sure scenarios exist where a schema really doesn&amp;#8217;t work. I don&amp;#8217;t have a predetermined list, but things like beyond-huge databases, etc. In those cases, I have nothing wrong with being pragmatic about it.&lt;/p&gt;

&lt;p&gt;However, it seems like these scenarios would be in the minority, and that most applications would be fine with, and benefit from, a schema.&lt;/p&gt;

&lt;p&gt;I think this is similar to the CAP theorem&amp;#8211;there are definitely instances of extremely high-volume, high-availability services (Amazon shopping cart, etc.) where they must choose &amp;#8220;AP&amp;#8221;.&lt;/p&gt;

&lt;p&gt;However, that doesn&amp;#8217;t mean that for every system &amp;#8220;AP&amp;#8221; is now the best fit&amp;#8211;&amp;#8221;C&amp;#8221; has some very nice properties to it that, if it fits your application&amp;#8217;s constraints (which it generally does for most, IMO), then you should by all means keep &amp;#8220;C&amp;#8221; and the simplicity that comes with it.&lt;/p&gt;

&lt;p&gt;Same thing with schemas&amp;#8211;if you really can&amp;#8217;t use one, I understand; I just question that stance being a default position.&lt;/p&gt;

&lt;h2 id='schemas_dont_have_to_be_relational'&gt;Schemas Don&amp;#8217;t Have to be Relational&lt;/h2&gt;

&lt;p&gt;I think people, myself included, usually associate database store schemas with relational databases. Which is an understandable association given the long, successful history of relational databases and how they all intrinsically have the notion of a schema.&lt;/p&gt;

&lt;p&gt;But other forms of schemas exist (XmlSchema, &lt;a href='http://jschema.org/'&gt;jschema&lt;/a&gt;, etc.), and I don&amp;#8217;t see anything wrong with a non-relational database that still had some sort of defined/enforced schema for what the data within it must look like.&lt;/p&gt;

&lt;p&gt;If anything, this could be quite nice, because even though relational schemas are ubiquitous, they are very much based on the underlying storage technology (tables/columns), and so don&amp;#8217;t map directly from higher-/domain-model-level abstractions like entities and parent/child/group relationships.&lt;/p&gt;

&lt;p&gt;Granted, relational-to-OO conventions have generally been established, so I don&amp;#8217;t think the object/relational impedance mismatch is quite the problem it used to, or is made out to, be. But I could see schemas with a slightly higher level of abstraction being useful.&lt;/p&gt;

&lt;h2 id='a_schema_facilitates_metaprogramming'&gt;A Schema Facilitates Metaprogramming&lt;/h2&gt;

&lt;p&gt;Although slightly tangential, having a schema that can be parsed by other tools is a great way for providing metadata about your system for use in code generation. See projects like &lt;a href='http://www.joist.ws'&gt;Joist&lt;/a&gt; that derive the entire domain layer (sans custom business logic) from the relational schema.&lt;/p&gt;

&lt;p&gt;Granted, a project&amp;#8217;s &amp;#8220;schema of record&amp;#8221; doesn&amp;#8217;t necessarily have to be relational, or the same schema as your database. E.g. I could see using a custom JSON schema to define your entities/relationships, and then going from there to a relational schema or some domain objects.&lt;/p&gt;

&lt;p&gt;This approach would let you express richer abstractions, but might also involve some duplication, as you have to maintain both this new master-schema and, even if you derive the database schema, you&amp;#8217;ll likely have to maintain migrations to intelligently update the database&amp;#8217;s existing data into the new schema.&lt;/p&gt;

&lt;p&gt;Anyway, I have had considerable success leveraging the metadata available in schemas, especially as systems grow to be more than a handful of entities, and would be disappointed to give that capability up.&lt;/p&gt;

&lt;h2 id='its_all_about_types'&gt;It&amp;#8217;s All About Types&lt;/h2&gt;

&lt;p&gt;Really, my desire for a schema is an extension of my &lt;a href='/2010/11/24/why-im-a-static-typing-bigot.html'&gt;static typing bigotry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just like how I think type contracts are a good idea for software programs (they provide intrinsic documentation and help programmers avoid mistakes), I think schemas are a great contract to have for databases. They provide the same benefits as types: documentation and helping programmers avoid mistakes.&lt;/p&gt;

&lt;p&gt;If anything, database contracts are even more important than type contracts because data is persistent. If your application blows up with &lt;code&gt;method_missing&lt;/code&gt;, eh, the caller can try again; but if a client writes a row/document with invalid contents, your application(s) will forever have to handle/skip that invalid data until it can be identified and fixed.&lt;/p&gt;

&lt;h2 id='disclaimer'&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;And, just as I must qualify my static typing position, I must qualify my pro-schema position that obviously many successful systems are being built with schema-less databases. And a lot of good things have been said about them. So it&amp;#8217;s of course impossible for me to pontificate that all schema-less systems are doomed to fail.&lt;/p&gt;

&lt;p&gt;But I nonetheless have a personal preference that I assert is supported by the trade-offs I&amp;#8217;ve tried to outline here. If your system can accept the trade-offs, I think schemas are generally worth their trouble in the long run.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Continually Improving Browser Technology</title>
   <link href="http://draconianoverlord.com/2012/04/17/browser-technology.html"/>
   <updated>2012-04-17T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/04/17/browser-technology</id>
   <content type="html">&lt;h1 id='continually_improving_browser_technology'&gt;Continually Improving Browser Technology&lt;/h1&gt;

&lt;p&gt;Just a quick note, I follow &lt;a href='http://peter.sh/'&gt;Peter Beverloo&amp;#8217;s blog&lt;/a&gt; and he posts approximately weekly about the latest development/committing activity in WebKit.&lt;/p&gt;

&lt;p&gt;E.g. the latest one: &lt;a href='http://peter.sh/2012/04/limiting-khtml-and-apple-prefixes-and-location-ancestororigins/'&gt;Limiting -khtml- and -apple- prefixes, and location.ancestorOrigins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t necessarily follow everything he says, but what astounds me is that WebKit+Chromium continually have 1500+ commits &lt;strong&gt;per week&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This rate of change is incredible to me. Especially in what I would otherwise consider a very mature platform. (It&amp;#8217;s not like you start Chrome every week and notice, &amp;#8220;hey, new UI this, or new feature that&amp;#8221;).&lt;/p&gt;

&lt;p&gt;It also makes me think about the supposed technology cycle of thin/tick client, e.g. AJAX applications these days are just like the desktop fat-clients of the mid-90s.&lt;/p&gt;

&lt;p&gt;Which, in an architectural diagram with 3 little circles on it, sure, they look a lot alike.&lt;/p&gt;

&lt;p&gt;But in the 90s, there were not multiple corporations (Google, Apple, Mozilla, Microsoft) poring &lt;em&gt;thousands of commits per week&lt;/em&gt; into improving their thick-client technology platforms. And actively, if not begrudgingly, working together on standards and even &lt;em&gt;test suites&lt;/em&gt; for their behavior.&lt;/p&gt;

&lt;p&gt;So, yeah, we&amp;#8217;re doing the &amp;#8220;same thing&amp;#8221;, but the client-side platforms of today are so much more powerful (and still rapidly evolving and improving in a semi-coherent fashion) that it&amp;#8217;s really not at all the same thing.&lt;/p&gt;

&lt;p&gt;Perhaps this is stating the obvious, but it was just on my mind.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Joist Builder Defaults</title>
   <link href="http://draconianoverlord.com/2012/03/29/joist-builder-defaults.html"/>
   <updated>2012-03-29T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/03/29/joist-builder-defaults</id>
   <content type="html">&lt;h1 id='joist_builder_defaults'&gt;Joist Builder Defaults&lt;/h1&gt;

&lt;p&gt;Joist 1.3.0 added some improvements to it&amp;#8217;s builders: defaults and fluent methods for codes.&lt;/p&gt;

&lt;h2 id='defaults'&gt;Defaults&lt;/h2&gt;

&lt;p&gt;Defaults provide a way to quickly create an object, or tree of objects, for testing when you&amp;#8217;re not as concerned about every single little value, and want your test to focus on just what is important.&lt;/p&gt;

&lt;p&gt;For example, let&amp;#8217;s take an object, &lt;code&gt;Employee&lt;/code&gt;, which has required fields for name, description, and start date. Previously you&amp;#8217;d have to do:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public void testSomething() {
  EmployeeBuilder e = aEmployee()
    .name(&amp;quot;e&amp;quot;) // not really important
    .description(&amp;quot;d&amp;quot;) // not really important
    .startDate(CalendarDate.from(2000, 1, 1));
  commitAndReOpen();
  // do something with the employee
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if your test is only interested in start dates, setting the name and description are a distraction.&lt;/p&gt;

&lt;p&gt;So, starting with Joist 1.3.0, you can do something like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public void testSomething() {
  EmployeeBuilder e = aEmployee()
    .startDate(CalendarDate.from(2000, 1, 1))
    .defaults();
  commitAndReOpen();
  // do something with the employee
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;defaults&lt;/code&gt; method (which is generated by Joist) will fill in default values for all required fields. Obviously, it does this very naively&amp;#8211;the output is basically:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public EmployeeBuilder defaults() {
  if (name() == null) {
    name(&amp;quot;name&amp;quot;);
  }
  if (description() == null) {
    description(&amp;quot;description&amp;quot;);
  }
  // will also include default values for field types
  if (ageInYears() == null) {
    ageInYears(0);
  }
  if (salaryAmount() == null) {
    salaryAmount(Money.dollars(0.00));
  }
  return this;
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='recursive_defaults'&gt;Recursive Defaults&lt;/h2&gt;

&lt;p&gt;So, primitives are easy enough, what&amp;#8217;s also cool is that &lt;code&gt;defaults&lt;/code&gt; will also fill in any required entities.&lt;/p&gt;

&lt;p&gt;For example, if you have an &lt;code&gt;Employer&lt;/code&gt; class, which is required for the &lt;code&gt;Employee.employer&lt;/code&gt; field, but for your current test, you don&amp;#8217;t really care about the employer, you just want it there, you can still just call &lt;code&gt;defaults()&lt;/code&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public void testSomething() {
  EmployeeBuilder e = aEmployee()
    .startDate(CalendarDate.from(2000, 1, 1))
    .defaults();
  // employer was filled in
  assertThat(e.employer(), is(not(nullValue()));
  commitAndReOpen();
  // do something with the employee
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code that Joist generates looks something like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public EmployeeBuilder defaults() {
  if (employer() == null) {
    employer(aEmployer().defaults());
  }
  // other required fields...
  return this;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, note that it calls &lt;code&gt;aEmployer().defaults()&lt;/code&gt;, which means the &lt;code&gt;Employer&lt;/code&gt; instance will have it&amp;#8217;s own required fields fill in.&lt;/p&gt;

&lt;p&gt;Which means it should be super-easy to get a &amp;#8220;basically valid&amp;#8221; domain object, regardless of which level of your domain object hierarchy you&amp;#8217;re testing.&lt;/p&gt;

&lt;p&gt;This has the potential to be a big win, because usually you have to start building domain object hierarchies from the top-down, and the upper levels are rarely meaningful to the test you&amp;#8217;re currently writing.&lt;/p&gt;

&lt;h2 id='customizing_defaults'&gt;Customizing Defaults&lt;/h2&gt;

&lt;p&gt;While Joist tries to generate sensible defaults, it knows nothing about your domain model or validation logic, so may very well fill invalid values.&lt;/p&gt;

&lt;p&gt;If you need to customize any of the defaults, you can override the generated &lt;code&gt;defaults&lt;/code&gt; method with your own:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;// Note: EmployeeBiulder is written by you, while the base
// class EmployeeBuilderCodegen is always generated by Joist
public class EmployeeBuilder extends EmployeeBuilderCodegen() {

  @Override
  public EmployeeBuilder defaults() {
    // say we have a rule that employee age != 0, so the
    // super.defaults() behavior of setting any int to 0
    // causes validation errors
    if (age() == null) {
      age(30);
    }
    // the other defaults are fine
    return super.defaults();
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, you can provide your own logic, but still reuse most of the generated &lt;code&gt;defaults&lt;/code&gt; logic.&lt;/p&gt;

&lt;h2 id='fluent_code_methods_for_builders'&gt;Fluent Code Methods for Builders&lt;/h2&gt;

&lt;p&gt;Builders also got a small, but nice, upgrade in their API for codes.&lt;/p&gt;

&lt;p&gt;(Briefly, codes in Joist are basically enums, e.g. an &lt;code&gt;EmployeeType&lt;/code&gt; enum with values of &lt;code&gt;PART_TIME&lt;/code&gt; and &lt;code&gt;FULL_TIME&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;So, given this &lt;code&gt;EmployeeType&lt;/code&gt;, if you are configuring an &lt;code&gt;Employee&lt;/code&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public void testEmployee() {
  // previously had to do:
  aEmployee().employeeType(EmployeeType.PART_TIME);

  // can now do:
  aEmployee().partTime();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This may seem like a small improvement, and, okay, it is, but it can make a noticeable difference in readability when you&amp;#8217;re setting up test objects and want to keep the code as succinct and boilerplate-free as possible.&lt;/p&gt;

&lt;h2 id='try_it_out'&gt;Try It Out&lt;/h2&gt;

&lt;p&gt;If you haven&amp;#8217;t tried out Joist, you should&amp;#8211;see the &lt;a href='http://joist.ws/gettingStarted.html'&gt;getting started&lt;/a&gt; docs and let me know how it goes.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Private Static Factory Method Chord</title>
   <link href="http://draconianoverlord.com/2012/03/24/private-static-factory-chord.html"/>
   <updated>2012-03-24T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/03/24/private-static-factory-chord</id>
   <content type="html">&lt;h1 id='private_static_factory_method_chord'&gt;Private Static Factory Method Chord&lt;/h1&gt;

&lt;p&gt;I have this notion of a &amp;#8220;refactoring chord&amp;#8221;, which is more than a single refactoring (like &lt;a href='http://martinfowler.com/refactoring/catalog/renameMethod.html'&gt;rename method&lt;/a&gt;), but less than a full-fledged &lt;a href='http://industriallogic.com/xp/refactoring/'&gt;refactoring to a pattern&lt;/a&gt; that I&amp;#8217;ve been meaning to post about for awhile now.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s simple and perhaps obvious, but I think still useful to recognize when stringing together multiple single refactorings in a common way works out particularly well.&lt;/p&gt;

&lt;p&gt;One chord that I like is what I&amp;#8217;ll call &amp;#8220;private static factory method&amp;#8221;, which is really just about creating custom/per-use factory methods (vs. factory methods in the class itself).&lt;/p&gt;

&lt;p&gt;This is often used for test data, e.g. if you have:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;Employee e1 = new Employee();
e1.setName(&amp;quot;e1&amp;quot;);
e1.setAge(50);
e1.setDescription(&amp;quot;great employee&amp;quot;);
Employee e2 = new Employee();
e2.setName(&amp;quot;e2&amp;quot;);
e2.setAge(51);
e2.setDescription(&amp;quot;awesome employee&amp;quot;);
Employee e3 = new Employee();
e3.setName(&amp;quot;e3&amp;quot;);
e3.setAge(52);
e3.setDescription(&amp;quot;wtf employee&amp;quot;);
doSomethingWith(e1, e2, e3);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sort of code burns my eyes. I can&amp;#8217;t keep track of the &lt;code&gt;e1&lt;/code&gt;, &lt;code&gt;e2&lt;/code&gt;, &lt;code&gt;e3&lt;/code&gt; variables, and often make copy/paste typos of missing a change from &lt;code&gt;e1&lt;/code&gt; to &lt;code&gt;e3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just grouping the assignments is a little better:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;Employee e1 = new Employee();
e1.setName(&amp;quot;e1&amp;quot;);
e1.setAge(50);
e1.setDescription(&amp;quot;great employee&amp;quot;);

Employee e2 = new Employee();
e2.setName(&amp;quot;e2&amp;quot;);
e2.setAge(51);
e2.setDescription(&amp;quot;awesome employee&amp;quot;);

Employee e3 = new Employee();
e3.setName(&amp;quot;e3&amp;quot;);
e3.setAge(52);
e3.setDescription(&amp;quot;wtf employee&amp;quot;);

doSomethingWith(e1, e2, e3);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As now each variable declaration is very close to it&amp;#8217;s use site and you can reason about &lt;code&gt;e1&lt;/code&gt; for awhile, then &lt;code&gt;e2&lt;/code&gt; for awhile, and finally &lt;code&gt;e3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, the multiple &lt;code&gt;setName&lt;/code&gt;, &lt;code&gt;setAge&lt;/code&gt;, &lt;code&gt;setDescription&lt;/code&gt; calls are a good candidate for &lt;a href='http://martinfowler.com/refactoring/catalog/extractMethod.html'&gt;Extract Method&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;Employee e1 = newEmployee(&amp;quot;e1&amp;quot;, 50, &amp;quot;great employee&amp;quot;);
Employee e2 = newEmployee(&amp;quot;e2&amp;quot;, 51, &amp;quot;awesome employee&amp;quot;);
Employee e3 = newEmployee(&amp;quot;e3&amp;quot;, 52, &amp;quot;wtf employee&amp;quot;);
doSomethingWith(e1, e2, e3);

private static Employee newEmployee(String name, int age, String description) {
  Employee e = new Employee();
  e.setName(name);
  e.setAge(age);
  e.setDescription(description);
  return e;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing ground breaking, and we&amp;#8217;re basically just adding a custom constructor/factory method for our own use. Obviously if you controlled the &lt;code&gt;Employee&lt;/code&gt; source and had several clients wanting a &lt;code&gt;newEmployee&lt;/code&gt; method, you could move it into the &lt;code&gt;Employee&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;However, I typically find these private factory methods make several use-case specific assumptions, e.g. if you&amp;#8217;re in a unit test you assume a certain scenario so that the test is more succinct.&lt;/p&gt;

&lt;p&gt;Anyway, to make this a chord instead of just a normal Extract Method, I&amp;#8217;ve seen this work really well by following up with an Inline Variable:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;doSomethingWith(
  newEmployee(&amp;quot;e1&amp;quot;, 50, &amp;quot;great employee&amp;quot;),
  newEmployee(&amp;quot;e2&amp;quot;, 51, &amp;quot;awesome employee&amp;quot;),
  newEmployee(&amp;quot;e3&amp;quot;, 52, &amp;quot;wtf employee&amp;quot;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The combination here (Extract Method + Inline Variable) I think results in much more readable code as we went from 13 LOC to accomplish what we really want (calling &lt;code&gt;doSomethingWith&lt;/code&gt;) to 4 LOC. ~3x less.&lt;/p&gt;

&lt;p&gt;(Yes, the &lt;code&gt;newEmployee&lt;/code&gt; method&amp;#8217;s LOC still counts against our total LOC, but I&amp;#8217;m concerned with the LOC of the current method here, e.g. if this is a &lt;code&gt;testDoSomething&lt;/code&gt; method that is also doing other setup/assertions, we&amp;#8217;re less likely to get distracted by 4 LOC in the middle of the test method than the original 13 LOC.)&lt;/p&gt;

&lt;p&gt;I often find myself using this in unit tests for constructing DTOs, e.g. when faking out DTOs coming in over the wire to the application under test.&lt;/p&gt;

&lt;p&gt;So, that&amp;#8217;s it, nothing ground breaking, but still useful, I think.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Joist, the Java ORM for Me</title>
   <link href="http://draconianoverlord.com/2012/03/21/joist-orm.html"/>
   <updated>2012-03-21T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2012/03/21/joist-orm</id>
   <content type="html">&lt;h1 id='joist_the_java_orm_for_me'&gt;Joist, the Java ORM for Me&lt;/h1&gt;

&lt;p&gt;This post is half-ranting about features of ORMs I don&amp;#8217;t like and half-evangelizing my own ORM, &lt;a href='http://joist.ws'&gt;Joist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure my thoughts on how I prefer an ORM to work do not hold for every single project out there. I&amp;#8217;ve been fortunate to work on relatively sane schemas and architectures that don&amp;#8217;t need more esoteric features like handling a schema designed in the 1980s. So, I just wanted explicitly note the disclaimer of &amp;#8220;for me&amp;#8221; in the title and note that YMMV.&lt;/p&gt;

&lt;p&gt;In other words, Joist is opinionated. But since Rails came long, that&amp;#8217;s a feature, right?&lt;/p&gt;

&lt;h2 id='speed_of_development'&gt;Speed of Development&lt;/h2&gt;

&lt;p&gt;The overriding concern I have when working with an ORM is how fast it makes me as a developer. How much code do I have to write? How long do the tests take to run? How long is the application startup time?&lt;/p&gt;

&lt;p&gt;I think this concern of developer efficiency affects a lot of implementation decisions in an ORM. For example, for Java/JVM-based ORMs, I think it means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Leveraging build-time code generation to reduce developer typing (discussed more below).&lt;/li&gt;

&lt;li&gt;Avoiding run-time code generation (CGLib/ASM proxies) to avoid long startup times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These concerns are not as big of a deal for projects-in-the-small. If you have 10 entities, manually typing out getters, setters, or waiting for CGLib to make 10 proxies on each startup, is not going to sink your project.&lt;/p&gt;

&lt;p&gt;But these concerns become much more important for projects-in-the-large. If you have 100 entities or 500 entities, these start become very important issues, and at that point you can&amp;#8217;t really fix them unless your ORM is specifically built to handle them.&lt;/p&gt;

&lt;h2 id='the_schema_is_the_master'&gt;The Schema is the Master&lt;/h2&gt;

&lt;p&gt;A core tenet of my take on ORMs is that the database schema should be the master definition of what the data being stored is, and what the objects look like. Yes, this assumes a sane schema.&lt;/p&gt;

&lt;p&gt;Many projects try and let developers write the domain objects first, asserting &amp;#8220;objects are the most important thing&amp;#8221;, and then reverse engineering the schema from there. I disagree with this, for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s wrong&amp;#8211;at the end of the day, the database really is where the data lives, and trying to pretend it is not will just exasperate the impedance mismatch.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Once you&amp;#8217;ve deployed 1.0 and have production data, you&amp;#8217;ll have to have migration scripts instead of &amp;#8220;here, ORM tool, crap out a from-scratch schema for me.&amp;#8221; Assuming you actually ship, maintenance always lasts longer than initial development, so I think projects should embrace migrations into their workflow from day 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='no_boilerplate'&gt;No Boilerplate&lt;/h2&gt;

&lt;p&gt;Given the previous tenet, the following assertion is that anything that can be derived from the schema is waste and should be avoided at all costs.&lt;/p&gt;

&lt;p&gt;I did not fully appreciate the boilerplate involved in most Java domain models until working in Rails and seeing a model like:&lt;/p&gt;

&lt;pre class='brush:ruby'&gt;&lt;code&gt;class Employee &amp;lt; ActiveRecord::Base
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rails then, of course, uses a sort of startup-time code generation to create getters, setters, etc. Unfortunately, while Java can do runtime code generation (CGLib, etc.), it means the generated code is not available to the programmer in their IDE to do code completion/etc. against.&lt;/p&gt;

&lt;p&gt;Hence, in my opinion, build-time code generation is the way ORMs should work. Joist in particular achieves a Rails-like brevity by using a base class that hides all of the cruft:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class Employee extends EmployeeCodegen {
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that it&amp;#8217;s critical that code generation can be used throughout the life of the project. Tools that reverse engineer a schema and generate a bunch of &lt;code&gt;.java&lt;/code&gt; files that then developers have to maintain by hand are useless once you start adding business logic to your domain model. You must be able to have the generated code and your changes coexist so that the generator can rerun with the latest schema/settings/etc. and not overwrite your changes.&lt;/p&gt;

&lt;p&gt;While C# has awesome things like partial classes, in Java I think the simplest solution is putting generated cruft in a base class. Other solutions like AspectJ inter-type declarations seem more magical than they&amp;#8217;re worth, in my opinion.&lt;/p&gt;

&lt;h2 id='annotations_suck'&gt;Annotations Suck&lt;/h2&gt;

&lt;p&gt;I personally believe annotations in domain objects are an anti-pattern because they violate the DRY principle and are just another form of getter-/setter-style boilerplate.&lt;/p&gt;

&lt;p&gt;For example, if you want describe a one-to-many relation in Hibernate/JPA, it might look like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;@OneToMany(
    cascade = { CascadeType.ALL },
    fetch = FetchType.EAGER,
    mappedBy = &amp;quot;parent&amp;quot;,
    orphanRemoval = true,
    targetEntity = Child.class)
@OrderBy(&amp;quot;id&amp;quot;)
private Set&amp;lt;Child&amp;gt; children;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, what about the next one-to-many you want to map? Copy/paste another 7 lines. Repeat for each one-to-many (and many-to-many) relation in your project. Even if the mapping is not 7 lines, say it&amp;#8217;s 2, or even 1, that adds up to a lot of copy/pasting that all developers on the project (who may not all understand the intricacies of what they&amp;#8217;re pasting) will do.&lt;/p&gt;

&lt;p&gt;Or, let&amp;#8217;s say you decide to map &lt;code&gt;datetime&lt;/code&gt; columns as &lt;code&gt;TimePoint&lt;/code&gt;s from the excellent &lt;a href='http://timeandmoney.sf.net/'&gt;timeandmoney&lt;/a&gt; library. With annotations, you must 1) use the &lt;code&gt;TimePoint&lt;/code&gt; type for the fields, getters, and setters and 2) add some sort of &lt;code&gt;Type&lt;/code&gt; annotation:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;@Type(type=&amp;quot;com.yourapp.TimePointCustomType&amp;quot;)
private TimePoint created;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then remember to do this for every single &lt;code&gt;datetime&lt;/code&gt; column in your application.&lt;/p&gt;

&lt;p&gt;I consider this to be a violation of DRY. So, in Joist, this decision of &amp;#8220;use TimePoints for datetimes&amp;#8221; is specified in just one place as a code generation rule:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;codegenConfig.setJavaType(
  &amp;quot;datetime&amp;quot;,
  &amp;quot;com.domainlanguage.time.TimePoint&amp;quot;,
  &amp;quot;joist.domain.orm.queries.columns.TimePointAliasColumn&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now all of the &lt;code&gt;datetime&lt;/code&gt; columns across the entire application will be mapped correctly.&lt;/p&gt;

&lt;p&gt;Note that you can also do pattern matching, e.g. any integer column ending with &amp;#8220;_amount&amp;#8221; is treated as &lt;code&gt;Money&lt;/code&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;codegenConfig.setJavaTypePattern(
  &amp;quot;integer&amp;quot;,
  &amp;quot;.*amount$&amp;quot;,
  &amp;quot;com.domainlanguage.money.Money&amp;quot;,
  &amp;quot;joist.domain.orm.queries.columns.MoneyAliasColumn&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are a few caveats here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The annotation may be only 1-2 lines, I admittedly picked a long example; but it is still something that needs maintained instead of inferred from the schema.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Annotations do allow you to tweak each individual field/collection in your domain model&amp;#8211;however &lt;em&gt;that is not a good thing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In my opinion, every collection in your system should be mapped exactly the same way. It keeps with the principle of least surprise. Otherwise developers will, over-time, get confused which mappings settings are used on which collections, which they should use when creating new ones, etc. The complexity of choice for every collection is not needed and not worth it.&lt;/p&gt;

&lt;p&gt;Better to just pick one style and be consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='relationship_management'&gt;Relationship Management&lt;/h2&gt;

&lt;p&gt;Another thing I find important is consistency. In the data store, of course (yes, NoSQL is awesome for big data, but ACID makes life a lot simpler if you can leverage it), but also in the domain objects.&lt;/p&gt;

&lt;p&gt;A pet peeve is using a domain model/ORM where the domain objects become inconsistent, as in:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;Parent p = findSomeParent();
Child c = new Child();
c.setParent(p);
// now, does this assertion pass?
assertTrue(p.getChildren().contains(c));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the assertion fails here, the &lt;code&gt;Parent&lt;/code&gt; and &lt;code&gt;Child&lt;/code&gt; objects have become inconsistent with each other and you&amp;#8217;re just asking for heartburn when business logic that is based on the &lt;code&gt;Parent&lt;/code&gt; starts looking for &lt;code&gt;Children&lt;/code&gt; and doesn&amp;#8217;t have the latest changes.&lt;/p&gt;

&lt;p&gt;This is especially important for validation logic in your domain objects. Something like &amp;#8220;all of a parent&amp;#8217;s &lt;code&gt;p.getChildren()&lt;/code&gt; must satisfy constraint X&amp;#8221; might get skipped if &lt;code&gt;c.setParent(p)&lt;/code&gt; was called but &lt;code&gt;p.getChildren()&lt;/code&gt; was not updated.&lt;/p&gt;

&lt;p&gt;My theory is that most projects probably don&amp;#8217;t bother with this because the code to maintain both sides of a relationship is very boilerplate-ish. Which makes it a perfect target for code generation, which is what Joist does.&lt;/p&gt;

&lt;p&gt;Tangentially, Hibernate has a feature for collections, setting &lt;code&gt;inverse=true&lt;/code&gt;, where you can control whether a &lt;code&gt;child.parent_id&lt;/code&gt; field is updated based on the &lt;code&gt;child.get/setParent&lt;/code&gt; or the &lt;code&gt;parent.getChildren().add/remove&lt;/code&gt;. This seems entirely dumb to me, as it&amp;#8217;s a feature that admits it lets your domain objects get out of sync.&lt;/p&gt;

&lt;h2 id='always_implicit_savecascading'&gt;Always Implicit Save/Cascading&lt;/h2&gt;

&lt;p&gt;I don&amp;#8217;t like ORM APIs that have methods like &lt;code&gt;saveOrUpdate(object)&lt;/code&gt;, which you have to call after having modified your domain object. To me this is redundant, and just asking for the developer to make a mistake and forget a step. But modifying a domain object, e.g. any getter or setter call, I think that should automatically get the changes persisted to the database when the transaction commits.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not sure why you would want it work any other way&amp;#8211;when would you call a setter but then &lt;em&gt;not&lt;/em&gt; want it to be saved (other than rolling back the whole transaction)? Seems like a non-feature that adds complication to me.&lt;/p&gt;

&lt;p&gt;For Joist, any time you touch a domain object within a Unit of Work (open transaction), it will get validated and saved. Nothing extra to worry about.&lt;/p&gt;

&lt;p&gt;Along the same lines, some ORMs let you configure cascading. E.g. if a &lt;code&gt;Parent&lt;/code&gt; is persisted, you can configure whether the &lt;code&gt;parent.getChildren&lt;/code&gt; are persisted. To me this is another quizzical non-feature. When would you not want the parent&amp;#8217;s children to also be persisted? Seems like a violation of least surprise if they were not.&lt;/p&gt;

&lt;h2 id='explicit_transaction_management'&gt;Explicit Transaction Management&lt;/h2&gt;

&lt;p&gt;Implicit transaction management is very popular these days, especially with some aspect-oriented magic where calling service layer methods automatically opens/closes the transaction. E.g. in a web app:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;Employee e1 = employeeService.find(1); // 1 txn here
e1.setSomething(...);
employeeService.save(e1); // another txn here&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This leads to a number of cons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My biggest complaint is that it breaks the transaction up so that the business logic is no longer wholly contained within 1 transaction. If multiple entities are retrieved from their respective service APIs, mutated, and then separately committed to their respective service APIs, there is no guarantee our business logic was all-or-nothing.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;If you do not pre-load all of the Employee&amp;#8217;s data you need within the &lt;code&gt;find&lt;/code&gt; API call, you&amp;#8217;ll suffer from the infamous &lt;code&gt;LazyInitializationException&lt;/code&gt;. It&amp;#8217;s easy to think that, no big deal, just pre-load the data within &lt;code&gt;find&lt;/code&gt;, but I&amp;#8217;ve seen this quickly degenerate where domain objects are over-fetching data to fulfill the union of all the business logic requirements instead of getting only what is needed for each one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that I think course-grained service APIs have their place&amp;#8211;primarily when you expose them on the wire to external clients. However, within a JVM, the coarse granularity doesn&amp;#8217;t make sense, in my opinion.&lt;/p&gt;

&lt;p&gt;Admittedly, projects like to leverage these service APIs for mocking, but I think that is a mistake as well. Briefly, because the mocks can never enforce the schema/validation constraints like the real database will, and, with Joist anyway, your database tests should be fast enough to just use the real database instead.&lt;/p&gt;

&lt;p&gt;Instead of service APIs, Joist uses a thread-local transaction (Unit of Work) that you generally open as early as possible and close as late as possible (e.g. leave it open within your view). E.g.:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;// in a filter
UoW.open();

// ... in servlet/etc.
// business logic just assumes txn is open
Employee.queries.findBy(&amp;quot;asdf&amp;quot;);

// if you need to ensure this committed, e.g. to get
// auto-assigned ids
UoW.commit();

// back in the filter
UoW.commit();
UoW.close();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, alternatively, you can use an oh-god-Java-is-ugly closure style:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;UoW.go(new Block() {
  public void go() {
    // in a txn now, it will commit on exit
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, if I was doing this all over again, I would probably not use static methods on the &lt;code&gt;UoW&lt;/code&gt; class and instead pass around the &lt;code&gt;UnitOfWork&lt;/code&gt; context. But I haven&amp;#8217;t gotten to refactoring that yet.&lt;/p&gt;

&lt;h2 id='type_safe_queries'&gt;Type Safe Queries&lt;/h2&gt;

&lt;p&gt;Given we&amp;#8217;re in Java/the JVM, I think ORMs should attempt some amount of type-safety around their queries. This is a hard problem though, and can range from simple (constants for database table/field names) to complex (modeling relational algebra in Scala).&lt;/p&gt;

&lt;p&gt;Joist takes a sort of middle ground, with &lt;a href='http://joist.ws/typeSafeQueries.html'&gt;type safe queries&lt;/a&gt; that are a mini-DSL for simple queries, e.g.:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public Child findByName(String name) {  
  ChildAlias c = new ChildAlias(&amp;quot;c&amp;quot;);  
  return Select.from(c).where(c.name.equals(name)).unique();  
}  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my experience this has been &amp;#8220;good enough&amp;#8221;, especially for Java. I think doing anything more complex (modeling relational algebra) takes jumping to Scala to do well.&lt;/p&gt;

&lt;h2 id='tests_have_to_commit'&gt;Tests Have to Commit&lt;/h2&gt;

&lt;p&gt;Often times ORMs will abuse transactions to make their tests fast&amp;#8211;specifically, before a test method runs, they open a transaction, execute the test method, and then rollback any changes the test made so than the next test method has a clean view of the database. This has several problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s not actually testing that your persistence code works&amp;#8211;any constraints that are checked by the database at transaction commit time (deferred foreign key constraints, deferred unique key constraints) are skipped and you risk having undetected bugs.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;If the test failed, but it&amp;#8217;s data has been rolled back, you can&amp;#8217;t go manually inspect what it looked like to try and debug what went wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, I do strongly believe that each test should have it&amp;#8217;s own &amp;#8220;fresh&amp;#8221; view the database, so that tests are not dependent on the order in which they are ran. However, I think this is best achieved by having a screaming fast way to reset the database between each test.&lt;/p&gt;

&lt;p&gt;For Joist, it leverages the code generation cycle to also generate a stored procedure (only in development) called &lt;code&gt;flush_test_database&lt;/code&gt;, that will delete the data from all non-stable tables (stable are tables like enums/codes). This means &lt;code&gt;setUp&lt;/code&gt; can make 1 wire call to the database and have everything reset.&lt;/p&gt;

&lt;h2 id='try_it'&gt;Try It!&lt;/h2&gt;

&lt;p&gt;So, Joist is my attempt to achieve all of these goals in an ORM built cleanly, from scratch to satisfy them and not a myriad of other use cases.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been using Joist successfully for day job and hobby projects for 2 years now, am on version 1.2.16, and feel pretty confident in its abilities.&lt;/p&gt;

&lt;p&gt;Please check out the &lt;a href='http://joist.ws'&gt;Joist&lt;/a&gt; website, the &lt;a href='http://github.com/stephenh/joist'&gt;code&lt;/a&gt;, or the &lt;a href='https://groups.google.com/forum/?fromgroups#!forum/joist'&gt;Joist dicussion list&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>todomvc in Tessell</title>
   <link href="http://draconianoverlord.com/2011/12/10/todomvc-in-gwt-mpv.html"/>
   <updated>2011-12-10T00:00:00-06:00</updated>
   <id>http://draconianoverlord.com/2011/12/10/todomvc-in-gwt-mpv</id>
   <content type="html">&lt;h1 id='todomvc_in_tessell'&gt;todomvc in Tessell&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Update 2011/12/29:&lt;/strong&gt; This post was originally about the gwt-mpv framework, which has since been rechristened Tessell, see &lt;a href='http://www.tessell.org'&gt;tessell.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently I came across &lt;a href='https://github.com/addyosmani/todomvc'&gt;todomvc&lt;/a&gt; on HN, a nifty sample application that shows the same &amp;#8220;todo app&amp;#8221; functionality implemented in a number of different JavaScript UI frameworks.&lt;/p&gt;

&lt;p&gt;It is a great way to compare JS frameworks, as &lt;a href='http://jgn.me/'&gt;Jérôme Gravel-Niquet&lt;/a&gt;&amp;#8217;s initial todo application has a great balance of features to lightly tax a framework but not take forever to implement. Kudos to &lt;a href='http://addyosmani.com/'&gt;Addy Osmani&lt;/a&gt; for realizing this and gathering together the various implementations.&lt;/p&gt;

&lt;p&gt;As a &lt;a href='http://code.google.com/webtoolkit/'&gt;GWT&lt;/a&gt; user, I have a slightly different viewpoint on JavaScript application development (eh, it&amp;#8217;s just assembly&amp;#8230;er, &lt;a href='http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly'&gt;C&lt;/a&gt;), but I nonetheless agree with these JS frameworks that intelligently structuring AJAX applications is important.&lt;/p&gt;

&lt;p&gt;In the GWT world, Model View Presenter has been the hot way to do this &lt;a href='http://www.google.com/events/io/2009/sessions/GoogleWebToolkitBestPractices.html'&gt;since 2009&lt;/a&gt;, and I&amp;#8217;ve obliged by hacking on &lt;a href='http://www.tessell.org'&gt;Tessell&lt;/a&gt;, an MVP framework, for various apps we&amp;#8217;re writing at &lt;a href='http://www.bizo.com'&gt;Bizo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tessell shares a lot of the same ideas and goals as the todomvc JS frameworks, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rich, event-driven models&lt;/li&gt;

&lt;li&gt;data-binding models to views declaratively&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I thought it&amp;#8217;d be fun to port todomvc to Tessell as yet another implementation to compare and contrast with the others.&lt;/p&gt;

&lt;p&gt;In doing so, and doing this writeup, I have two goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show GWT developers that Tessell&amp;#8217;s code generation-driven MVP leads to minimal boilerplate&lt;/li&gt;

&lt;li&gt;Show JavaScript developers that GWT can be a competent choice for rich-client development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='demo_and_code'&gt;Demo and Code&lt;/h2&gt;

&lt;p&gt;Although it looks just like the other implementations, the Tessell port&amp;#8217;s code is currently hosted here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://todomvc.tessell.org/TodoMvc.html'&gt;http://todomvc.tessell.org/TodoMvc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you want to follow along in the source while reading this post, the source is on github:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/stephenh/todomvc-tessell'&gt;https://github.com/stephenh/todomvc-tessell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='project_layout'&gt;Project Layout&lt;/h2&gt;

&lt;p&gt;The Tessell todo implementation uses an idiomatic Java/GWT layout. The primary packages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/stephenh/todomvc-tessell/tree/master/src/main/java/org/tessell/todomvc/client/app'&gt;org.tessell.todomvc.client.app&lt;/a&gt; for presenters,&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/stephenh/todomvc-tessell/tree/master/src/main/java/org/tessell/todomvc/client/model'&gt;org.tessell.todovmc.client.model&lt;/a&gt; for models, and&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/stephenh/todomvc-tessell/tree/master/src/main/java/org/tessell/todomvc/client/views'&gt;org.tessell.todomvc.client.views&lt;/a&gt; for view templates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a small application like the todo app, having multiple files is likely harder to follow than the JS implementations, which typically have just one JS file + CSS file. However, this approach works best for GWT and means you already have a good setup if your project grows larger.&lt;/p&gt;

&lt;h2 id='models'&gt;Models&lt;/h2&gt;

&lt;p&gt;To start with, all rich UI frameworks typically define models for the domain objects involved. In Tessell, this is done simply with a &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/model/Todo.java'&gt;Todo&lt;/a&gt; class:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class Todo {
  public final BooleanProperty done = booleanProperty(&amp;quot;done&amp;quot;, false);
  public final StringProperty name = stringProperty(&amp;quot;name&amp;quot;);

  public Todo(String name) {
    this.name.set(name);
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of traditional Java fields + getters/setters, Tessell models have property objects. Property objects fire events when they change, which allows the rest of the application to react accordingly.&lt;/p&gt;

&lt;p&gt;You can also have lists of model objects, which fire events when items are added/removed to the list, e.g. in &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/model/AppState.java'&gt;AppState&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class AppState {
  public final ListProperty&amp;lt;Todo&amp;gt; allTodos = listProperty(&amp;quot;allTodos&amp;quot;);
  public final ListProperty&amp;lt;Todo&amp;gt; doneTodos = listProperty(&amp;quot;doneTodos&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the JS frameworks, Tessell also supports derived properties, e.g. in &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/model/AppState.java#L18'&gt;AppState&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;numberLeft = integerProperty(new DerivedValue&amp;lt;Integer&amp;gt;() {
  public Integer get() {
    return allTodos.get().size() - doneTodos.get().size();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tessell models can also do validation of properties (required, length checks, etc.), but that wasn&amp;#8217;t needed for the todo application.&lt;/p&gt;

&lt;h2 id='views'&gt;Views&lt;/h2&gt;

&lt;p&gt;Tessell&amp;#8217;s views build on GWT&amp;#8217;s &lt;a href='http://code.google.com/webtoolkit/doc/latest/DevGuideUiBinder.html'&gt;UiBinder&lt;/a&gt;, which uses HTML-like XML to layout your application. The main distinguishing feature of UiBinder is that it lacks any logic (either behavior or data binding) in the view&amp;#8211;there are no &lt;code&gt;&amp;lt;% if (...) %&amp;gt;&lt;/code&gt; tags or &lt;code&gt;data-bind=&amp;quot;...&amp;quot;&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/views/ListTodoItem.ui.xml#L76'&gt;ListTodoItem.ui.xml&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;gwt:HTMLPanel ui:field=&amp;quot;li&amp;quot; tag=&amp;quot;li&amp;quot; styleName=&amp;quot;{style.todo}&amp;quot;&amp;gt;
  &amp;lt;div ui:field=&amp;quot;displayPanel&amp;quot;&amp;gt;
    &amp;lt;gwt:CheckBox ui:field=&amp;quot;checkBox&amp;quot; styleName=&amp;quot;{style.check}&amp;quot; /&amp;gt;
    &amp;lt;gwt:Label ui:field=&amp;quot;content&amp;quot; styleName=&amp;quot;{style.todo-content}&amp;quot; /&amp;gt;
    &amp;lt;gwt:Anchor ui:field=&amp;quot;destroyAnchor&amp;quot; styleName=&amp;quot;{style.todo-destroy}&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div ui:field=&amp;quot;editPanel&amp;quot;&amp;gt;
    &amp;lt;gwt:TextBox ui:field=&amp;quot;editBox&amp;quot; styleName=&amp;quot;{style.editBox}&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/gwt:HTMLPanel&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(If you&amp;#8217;re not familiar with the todo app, it alternates between the &lt;code&gt;displayPanel&lt;/code&gt; when the user is viewing a todo and the &lt;code&gt;editPanel&lt;/code&gt; when a user double-clicks to edit a todo.)&lt;/p&gt;

&lt;p&gt;Some GWT specifics aside (widgets, etc.), this is basically HTML. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ui:field&lt;/code&gt; attributes expose their annotated elements/widgets to your presentation logic.&lt;/p&gt;

&lt;p&gt;(GWT eschews &lt;code&gt;id&lt;/code&gt; attributes because a template may be included multiple times in the DOM and, ids being global, could collide.)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;code&gt;{style.todo}&lt;/code&gt; is a reference to the &lt;code&gt;.todo&lt;/code&gt; CSS class defined inline within the &lt;code&gt;ui.xml&lt;/code&gt; file. This means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You have a good place to put per-view CSS (it all ends up bundled into one download in the end), which to me is a much saner alternative than the gigantic CSS files I usually see.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a locality principle: if CSS is used only once, it should be as close to that usage point, and none other, as possible.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The compiler checks all CSS class references&amp;#8211;if &lt;code&gt;.todo&lt;/code&gt; was renamed, you get a compile error.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The compiler ensures all CSS identifiers are globally unique&amp;#8211;if you use &lt;code&gt;.name&lt;/code&gt; in one &lt;code&gt;ui.xml&lt;/code&gt; or &lt;code&gt;css&lt;/code&gt; file, you don&amp;#8217;t have to worry about it colliding with another &lt;code&gt;.name&lt;/code&gt; in another &lt;code&gt;ui.xml&lt;/code&gt; or &lt;code&gt;css&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main feature that Tessell provides for views is generating derivative artifacts from the &lt;code&gt;ui.xml&lt;/code&gt; files. In the MVP pattern, presenters code against an abstract &lt;code&gt;IsXxxView&lt;/code&gt; interface, and then UiBinder needs a &lt;code&gt;XxxViewImpl&lt;/code&gt; Java class, but Tessell can derive both of these from the &lt;code&gt;ui.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;For an example, the generated &lt;code&gt;IsListTodoItemView&lt;/code&gt; looks like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;interface IsListTodoItemView extends IsWidget {
  IsHTMLPanel li();
  IsElement displayPanel();
  IsCheckBox checkBox();
  IsLabel content();
  IsAnchor destroyAnchor();
  IsElement editPanel();
  IsTextBox editBox();
  ListTodoItemStyle style();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where each &lt;code&gt;ui:field&lt;/code&gt;-annotated element/widget in the &lt;code&gt;ui.xml&lt;/code&gt; file is exposed, but only as an abstract &lt;code&gt;IsXxx&lt;/code&gt; interface which themselves can be substituted for fake DOM-less versions at test time. We&amp;#8217;ll cover this more later when talking about testing.&lt;/p&gt;

&lt;h2 id='presenters'&gt;Presenters&lt;/h2&gt;

&lt;p&gt;Presenters are the glue between your model and view. Ideally presenters simply bind the model and view together; but, if needed, they can also implement more complex logic.&lt;/p&gt;

&lt;p&gt;An extremely simple presenter is &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/app/AppPresenter.java'&gt;AppPresenter&lt;/a&gt;, which just assembles the three separate panels of the application:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class AppPresenter extends BasicPresenter&amp;lt;IsAppView&amp;gt; {

  private final AppState state = new AppState();
  private final CreateTodoPresenter createTodo = addPresenter(new CreateTodoPresenter(state.allTodos));
  private final StatsTodoPresenter statsTodo = addPresenter(new StatsTodoPresenter(state));
  private final ListTodoPresenter listTodos = addPresenter(new ListTodoPresenter(state));

  public AppPresenter() {
    super(newAppView());
  }

  @Override
  public void onBind() {
    super.onBind();
    view.createPanel().add(createTodo.getView());
    view.listPanel().add(listTodos.getView());
    view.statsPanel().add(statsTodo.getView());
    view.creditsPanel().add(newCreditsView());
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously usually presenters do a bit more; in the todo app, the most busy presenter is the &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/app/ListTodoItemPresenter.java'&gt;ListTodoItemPresenter&lt;/a&gt;, which, amongst other things, binds the &lt;code&gt;todo.name&lt;/code&gt; property to the view:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.bind(todo.name).to(view.editBox());
binder.bind(todo.name).toTextOf(view.content());
binder.bind(todo.done).to(view.checkBox());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These three one-liners setup two-way data binding between the model and the view. If &lt;code&gt;todo.name&lt;/code&gt; changes, both &lt;code&gt;view.editBox()&lt;/code&gt; and &lt;code&gt;view.content()&lt;/code&gt; will be updated with the new name. If the user enters a new name into &lt;code&gt;view.editBox()&lt;/code&gt;, it will flow back into &lt;code&gt;todo.name&lt;/code&gt; (and subsequently into &lt;code&gt;view.content()&lt;/code&gt;)).&lt;/p&gt;

&lt;p&gt;Besides just binding fields, the binder DSL can also be used for performing other common view actions on model change, such as showing/hiding or setting/removing CSS classes:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.when(editing).is(true).show(view.editPanel());
binder.when(editing).is(true).hide(view.displayPanel());
binder.when(editing).is(true).set(s.editing()).on(view.li());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, looking at &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/app/ListTodoPresenter.java'&gt;ListTodoPresenter&lt;/a&gt;, keeping the view&amp;#8217;s &lt;code&gt;ul&lt;/code&gt; list of one-&lt;code&gt;li&lt;/code&gt;-per-todo in sync with the &lt;code&gt;allTodos&lt;/code&gt; list model can also be done with binding:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.bind(state.allTodos).to(this, view.ul(), new ListPresenterFactory&amp;lt;Todo&amp;gt;() {
  public Presenter create(Todo todo) {
    return new ListTodoItemPresenter(state, todo);
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully you can see that, besides view boilerplate reduction, rich models and a fluent binding DSL are the other main strengths Tessell brings to the table to succinctly, declaratively wire together your application&amp;#8217;s behavior.&lt;/p&gt;

&lt;h2 id='testing'&gt;Testing&lt;/h2&gt;

&lt;p&gt;Finally, the reason for the extra abstraction of the Model View Presenter architecture, it is now ridiculously easy to test your model and presenter logic without the DOM.&lt;/p&gt;

&lt;p&gt;For the todomvc port, this means we can test the &amp;#8220;add a new todo&amp;#8221; functionality by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setting up a test list model&lt;/li&gt;

&lt;li&gt;Instantiating the presenter to test&lt;/li&gt;

&lt;li&gt;Retrieving the stub (no DOM) view implementation (which is generated by Tessell from the &lt;code&gt;ui.xml&lt;/code&gt; template file) that has fake versions of each of our components&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So a test starts out looking like &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/test/java/org/tessell/todomvc/client/app/CreateTodoPresenterTest.java'&gt;CreateTodoPresenterTest&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;public class CreateTodoPresenterTest extends AbstractPresenterTest {
  final ListProperty&amp;lt;Todo&amp;gt; todos = listProperty(&amp;quot;todos&amp;quot;);
  final CreateTodoPresenter p = bind(new CreateTodoPresenter(todos));
  final StubCreateTodoView v = (StubCreateTodoView) p.getView();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then goes right into testing features:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;@Test
public void enterOnSomeContentCreatesTask() {
  // model starts out empty
  assertThat(todos.get().size(), is(0));
  // user enters a new task, hits enter
  v.newTodo().type(&amp;quot;new task&amp;quot;);
  v.newTodo().keyDown(KeyCodes.KEY_ENTER);
  // model now has a new task with the right name
  assertThat(todos.get().size(), is(1));
  assertThat(todos.get().get(0).getName(), is(&amp;quot;new task&amp;quot;));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;newTodo().type(...)&lt;/code&gt; method emulates a user typing into the &amp;#8220;new todo&amp;#8221; text box. &lt;code&gt;newTodo().keyDown(...)&lt;/code&gt; is the enter key being pressed. And then we can assert our model was changed, and the new model object created with the right name.&lt;/p&gt;

&lt;p&gt;The Tessell port has ~30 presenter tests like this one. They all run in 1/10th of a second, no selenium, no browser, etc.&lt;/p&gt;

&lt;p&gt;To me, this means its now actually feasible to develop your UI logic in a TDD fashion. Which is a huge win.&lt;/p&gt;

&lt;p&gt;Okay, now the caveats:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Yes, this is a lossy abstraction. It doesn&amp;#8217;t pretend to emulate cross-browser differences. It doesn&amp;#8217;t realize that setting &amp;#8220;display: none&amp;#8221; on a parent makes the children invisible. In practice, that doesn&amp;#8217;t matter for these sorts of tests.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Yes, this can&amp;#8217;t test DOM-heavy logic. That logic should ideally be encapsulated within a component. Then you test the component with &lt;code&gt;GWTTestCase&lt;/code&gt; (which has a DOM) or selenium or whatever, but then let your presenter tests be DOM-less by using a fake version of the component assuming the real one will just work.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Yes, you still need integration tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, it&amp;#8217;s not perfect. But if you had to choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;500 unit tests + 50 selenium tests, or&lt;/li&gt;

&lt;li&gt;550 selenium tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think it&amp;#8217;s a fair assertion you&amp;#8217;re much better off with the former.&lt;/p&gt;

&lt;h2 id='comparison_with_js_frameworks'&gt;Comparison with JS Frameworks&lt;/h2&gt;

&lt;p&gt;Reading through the various JS implementations of the todo app, and Tessell&amp;#8217;s implementation, it&amp;#8217;s encouraging to see that they are all trying to do basically the same thing: use event-driven models and views to wire together a rich client.&lt;/p&gt;

&lt;p&gt;I think this approach of declaratively setting up view/model bindings is the key to doing non-trivial AJAX applications without loosing your functionality (or sanity, whichever is less important) to growing balls of spaghetti code. Changing the model should lead to the view updates just working.&lt;/p&gt;

&lt;p&gt;That being said, each framework does things slightly differently. Here I&amp;#8217;ll briefly cover how GWT/Tessell is different.&lt;/p&gt;

&lt;h3 id='templates'&gt;Templates&lt;/h3&gt;

&lt;p&gt;GWT&amp;#8217;s &lt;code&gt;ui.xml&lt;/code&gt; files seem like the most static/most dumb view templates. Whether this is good or bad is personal preference, although I like it because I think it forces as much view logic as possible into the presenter.&lt;/p&gt;

&lt;p&gt;Some JS frameworks, like backbone, use more server-side-style templates:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/template&amp;quot; id=&amp;quot;item-template&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;todo &amp;lt;%= done ? &amp;#39;done&amp;#39; : &amp;#39;&amp;#39; %&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;display&amp;quot;&amp;gt;
      &amp;lt;input class=&amp;quot;check&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;lt;%= done ? &amp;#39;checked=&amp;quot;checked&amp;quot;&amp;#39; : &amp;#39;&amp;#39; %&amp;gt; /&amp;gt;
      &amp;lt;div class=&amp;quot;todo-content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;span class=&amp;quot;todo-destroy&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;edit&amp;quot;&amp;gt;
      &amp;lt;input class=&amp;quot;todo-input&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where others use data-binding attributes, like knockout:&lt;/p&gt;

&lt;pre class='brush:html'&gt;&lt;code&gt;&amp;lt;script id=&amp;quot;todoitemtemplate&amp;quot; type=&amp;quot;text/html&amp;quot;&amp;gt;
  &amp;lt;li data-bind=&amp;quot;css: {editing: editing}&amp;quot;&amp;gt;
    &amp;lt;div data-bind=&amp;quot;attr: { class : done() ? &amp;#39;todo done&amp;#39; : &amp;#39;todo&amp;#39;}&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;display&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;check&amp;quot; type=&amp;quot;checkbox&amp;quot; data-bind=&amp;quot;checked: done&amp;quot; /&amp;gt;
        &amp;lt;div class=&amp;quot;todo-content&amp;quot; data-bind=&amp;quot;text: content, click: edit&amp;quot; style=&amp;quot;cursor: pointer;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;span class=&amp;quot;todo-destroy&amp;quot; data-bind=&amp;quot;click: viewModel.remove&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;edit&amp;quot;&amp;gt;
        &amp;lt;input class=&amp;quot;todo-input&amp;quot; type=&amp;quot;text&amp;quot; data-bind=&amp;quot;value: content, event: { keyup: editkeyup, blur: stopEditing }&amp;quot;/&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These approaches typically require rendering the DOM elements to test the view logic. I generally think this is a bad thing, although I was surprised to learn that, if you avoid the traditional Selenium/etc., approaches, in-browser DOM testing can be &lt;a href='http://tinnedfruit.com/2011/04/26/testing-backbone-apps-with-jasmine-sinon-3.html'&gt;quite fast&lt;/a&gt; these days.&lt;/p&gt;

&lt;p&gt;Also with templates, in GWT you rarely re-render parts of the page to show changes, instead you just mutate the existing DOM (&amp;#8230;unless using GWT&amp;#8217;s Cell widgets, which are for bulk display for tables/lists, but are exceptions). Some JS frameworks re-render, some don&amp;#8217;t, but in general I&amp;#8217;m a fan of not re-rendering.&lt;/p&gt;

&lt;p&gt;Avoiding re-rending is, in my opinion, more amenable to a rich, component-based UI because then your components (which have state) aren&amp;#8217;t having their underlying DOM elements constantly swept out from under them.&lt;/p&gt;

&lt;p&gt;This may not be an issue when re-rendering tiny, leaf parts of the DOM, but as you work your way up in the DOM of a complex app, I think it would become harder to remember all the state needed to faithfully re-render things from scratch (like the checked state in the above backbone example).&lt;/p&gt;

&lt;p&gt;I can see where the sentiment of &amp;#8220;eh, just re-render&amp;#8221; comes from. Having been a server-side web developer, I certainly miss the simplicity of the &amp;#8220;each response is a clean slate&amp;#8221; model. And re-rendering entire parts of the page certainly worked well for Rails, albeit it was still doing rendering on the server-side. However, I don&amp;#8217;t think it is as good of a conceptual fit on a stateful client.&lt;/p&gt;

&lt;h3 id='no_selectors'&gt;No Selectors&lt;/h3&gt;

&lt;p&gt;In GWT, you typically already have references to the DOM objects you want to mutate (albeit usually encapsulated by widgets), so you rarely, if ever, need selectors.&lt;/p&gt;

&lt;p&gt;The is different than most of the JS frameworks. For example, in the backbone implementation, to update a list item&amp;#8217;s text when it changes, the code uses a selector to reach out and grab the text box:&lt;/p&gt;

&lt;pre class='brush:jscript'&gt;&lt;code&gt;this.$(&amp;#39;.todo-content&amp;#39;).text(content);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where as in the &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/app/ListTodoItemPresenter.java#L66'&gt;ListTodoItemPresenter&lt;/a&gt;, the view kept a reference to the DOM element while building itself (done by UiBinder), so now we can just call it directly:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;view.content().setText(view.editBox().getText());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The &lt;code&gt;content()&lt;/code&gt; method is just a getter than returns the view&amp;#8217;s &lt;code&gt;content&lt;/code&gt; field, which is a GWT Label component, which just wraps a DOM &lt;code&gt;div&lt;/code&gt; tag.)&lt;/p&gt;

&lt;p&gt;Several of the JS frameworks also like to use selectors for event handling, again backbone:&lt;/p&gt;

&lt;pre class='brush:jscript'&gt;&lt;code&gt;events: {
  &amp;quot;click .check&amp;quot;              : &amp;quot;toggleDone&amp;quot;,
  &amp;quot;dblclick div.todo-content&amp;quot; : &amp;quot;edit&amp;quot;,
  &amp;quot;click span.todo-destroy&amp;quot;   : &amp;quot;clear&amp;quot;,
  &amp;quot;keypress .todo-input&amp;quot;      : &amp;quot;updateOnEnter&amp;quot;
},&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where as GWT typically uses old-school anonymous inner classes:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;view.newTodo().addKeyDownHandler(new KeyDownHandler() {
  public void onKeyDown(KeyDownEvent event) {
    // ...
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although if you&amp;#8217;re just updating a model, this can be cleaned up by using the binder DSL:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;binder.bind(done).to(view.checkBox());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though anonymous inner classes are not the most awesome thing ever, avoiding selectors has a few up-shots:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Your code more exactly denotes the elements it will change.&lt;/p&gt;

&lt;p&gt;This is a lot like dynamic vs. static typing; selectors are dynamic, deferring the binding of the selector to underlying elements until execution time, while GWT&amp;#8217;s known-references approach has a stronger assertion about which elements it will change.&lt;/p&gt;

&lt;p&gt;And so if you refactor the HTML in your &lt;code&gt;ui.xml&lt;/code&gt; file, your view interface changes, and any presenter logic that was depending on it may now break, vs. the magic selector string just silently not matching.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Your application doesn&amp;#8217;t have to worry about selectors from various components overlapping each other.&lt;/p&gt;

&lt;p&gt;Naive DOM selectors will select against the global DOM, which in a large, complex application is less-than-ideal. Better selectors will start with the component&amp;#8217;s subtree of the DOM, and even better selectors will not continue searching within the component&amp;#8217;s nested children components.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Testing is easier because you don&amp;#8217;t need a fake DOM to run the selectors against. More on testing below, but if your code mutates explicit references, it&amp;#8217;s easier for tests to fake these references out at test time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally, I think selectors are leftover baggage from the Web 1.0 days. When people first started doing AJAX, 95%+ of the page was rendered server-side, so of course you don&amp;#8217;t have JavaScript references to the things you want to change, the elements all came down in one big string of HTML. So selectors were a great way to reach back into a DOM you didn&amp;#8217;t create and get at them.&lt;/p&gt;

&lt;p&gt;However, for full-page AJAX applications, when 95%+ of the page is rendered client-side, the very act of rendering provides the perfect opportunity to grab explicit references to the DOM objects as they are created and hold on to them within your application logic (in widgets, components, etc.). In my experience, this negates any need for selectors.&lt;/p&gt;

&lt;h2 id='disclaimers'&gt;Disclaimers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Per my earlier link to Ray Ryan&amp;#8217;s 2009 Google I/O talk, I can&amp;#8217;t take credit for the DOM-less testing approach. Tessell, and several other frameworks within the GWT sphere, are just running with a great idea.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;In the todo application, I used a global &lt;a href='https://github.com/stephenh/todomvc-tessell/blob/master/src/main/java/org/tessell/todomvc/client/model/AppState.java'&gt;AppState&lt;/a&gt; class to share the &lt;code&gt;ListProperty&lt;/code&gt;s across presenters. Some GWT developers would probably lobby for even more decoupling by passing messages on an &lt;code&gt;EventBus&lt;/code&gt;, but that seemed like overkill for this app.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The original CSS was in one massive file, and I may have butchered it when moving it into each component. It looks fine in Chrome, but YMMV.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Yes, Java isn&amp;#8217;t cool anymore, but &lt;a href='http://scalagwt.github.com/'&gt;scala-gwt&lt;/a&gt; will make everything more awesome and terse when it ships.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Sane AJAX Testing in Selenium</title>
   <link href="http://draconianoverlord.com/2011/10/14/sane-selenium-testing.html"/>
   <updated>2011-10-14T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2011/10/14/sane-selenium-testing</id>
   <content type="html">&lt;h1 id='sane_ajax_testing_in_selenium'&gt;Sane AJAX Testing in Selenium&lt;/h1&gt;

&lt;p&gt;Let&amp;#8217;s cut to the chase: testing AJAX applications can suck.&lt;/p&gt;

&lt;p&gt;Selenium is great for Web 1.0 applications, which involve a page load after each significant user action. Selenium knows to block until the page is done loading, and so the page load provides an implicit &amp;#8220;wait until crap is done&amp;#8221; barrier to keep your test from getting ahead of the browser.&lt;/p&gt;

&lt;p&gt;But that goes away in AJAX applications&amp;#8211;no page load. There are a variety of ways to compensate, most of which are what I call pre-assertion waiting&amp;#8211;before asserting &amp;#8220;did X happen&amp;#8221; poll for a little bit to ensure &amp;#8220;X&amp;#8221; is there. E.g.:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;ajaxSubmit.click();
waitForErrorToShowUp();
assertErrorIs(...);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my experience, pre-assertion waiting in tests is not ideal. They&amp;#8217;re verbose, often fickle, and at a higher risk of rotting when the application is refactored (&amp;#8220;Is this wait really needed? Better leave it in, just in case.&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Instead, I think a good goal for functional UI tests is to &lt;strong&gt;never have explicit wait lines&lt;/strong&gt; in your test methods. If you can pull this off, I think the resulting tests will be more readable, more reliable, and more resilient to change.&lt;/p&gt;

&lt;p&gt;To accomplish this, I&amp;#8217;ve been using two tricks that, in tandem, work really well:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reintroduce the concept of &amp;#8220;page loading&amp;#8221;&lt;/li&gt;

&lt;li&gt;Use post-action waiting instead of pre-assertion waiting&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And also a heavy dose of &lt;a href='http://code.google.com/p/selenium/wiki/PageObjects'&gt;Page Objects&lt;/a&gt; abstraction.&lt;/p&gt;

&lt;p&gt;So, let&amp;#8217;s see what this looks like.&lt;/p&gt;

&lt;h2 id='reintroduce_page_loading'&gt;Reintroduce &amp;#8220;page loading&amp;#8221;&lt;/h2&gt;

&lt;p&gt;First: reintroduce page loading. Not real page loading, obviously. But what was Web 1.0 page loading useful for? Knowing when the browser is waiting on the server. AJAX calls are the same thing&amp;#8211;talking to the server. We just need to make it explicit and visible to Selenium.&lt;/p&gt;

&lt;p&gt;There are a variety of ways of doing this, but you basically need a choke point in your application where all AJAX requests go through. Then:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Before any AJAX request goes out, increment an &lt;code&gt;outstanding&lt;/code&gt; variable&lt;/li&gt;

&lt;li&gt;Put the value of &lt;code&gt;outstanding&lt;/code&gt; into a hidden &lt;code&gt;div&lt;/code&gt; tag&lt;/li&gt;

&lt;li&gt;When the AJAX response comes back, decrement &lt;code&gt;outstanding&lt;/code&gt; variable&lt;/li&gt;

&lt;li&gt;Again put the value of &lt;code&gt;outstanding&lt;/code&gt; into the hidden &lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now Selenium has the ability to see the application&amp;#8217;s &amp;#8220;loading&amp;#8221; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;outstanding.innerText == &amp;quot;0&amp;quot;&lt;/code&gt;, all things are good, continue the test&lt;/li&gt;

&lt;li&gt;If &lt;code&gt;outstanding.innerText != &amp;quot;0&amp;quot;&lt;/code&gt;, the application is waiting, block the test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;#8217;t have any JavaScript code to show how this works, as I do all my client-side programming in GWT, so use a &lt;a href='http://code.google.com/p/gwt-dispatch/'&gt;gwt-dispatch&lt;/a&gt;-style approach that broadcasts AJAX events on an &lt;code&gt;EventBus&lt;/code&gt;, which then &lt;a href='https://github.com/stephenh/tessell/blob/master/user/src/main/java/org/tessell/util/OutstandingWatcher.java'&gt;OutstandingWatcher&lt;/a&gt; listens for and maintains the &lt;code&gt;outstanding&lt;/code&gt; div appropriately.&lt;/p&gt;

&lt;p&gt;For JQuery/etc., something in &lt;a href='http://api.jquery.com/extending-ajax/'&gt;Extending AJAX&lt;/a&gt; would probably work. It&amp;#8217;s probably 10-20 lines of code.&lt;/p&gt;

&lt;p&gt;Anyway, once you have this in place, you&amp;#8217;ve basically got page loads back&amp;#8211;any time an AJAX request is in-flight, Selenium can know about it by watching if &lt;code&gt;outstanding != 0&lt;/code&gt;. E.g. with Selenium&amp;#8217;s new &lt;code&gt;ExpectedConditions&lt;/code&gt; API, it might look like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;/** Waits until all async calls are complete. */
public static ExpectedCondition&amp;lt;Boolean&amp;gt; outstanding() {
  return new ExpectedCondition&amp;lt;Boolean&amp;gt;() {
    public Boolean apply(final WebDriver from) {
      final String outstanding = from
        .findElement(By.id(&amp;quot;outstanding&amp;quot;))
        .getText();
      return &amp;quot;0&amp;quot;.equals(outstanding);
    }
  };
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, then you could use this in a test like:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;ajaxSubmit.click();
WebDriverUtil.waitFor(outstanding());
assertErrorIs(...);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='postaction_waiting'&gt;Post-Action Waiting&lt;/h2&gt;

&lt;p&gt;Which brings us right to the second trick: the test is now doing &lt;strong&gt;post-action&lt;/strong&gt; waiting. And not only is it post-action, but it&amp;#8217;s &lt;strong&gt;generic waiting&lt;/strong&gt;. This has several nice benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It doesn&amp;#8217;t matter whatever the application was doing while the request was in-flight&amp;#8211;spinning a wheel for the user, doing nothing at all, whatever&amp;#8211;Selenium can always look for &lt;code&gt;outstanding != 0&lt;/code&gt; and just work.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;It doesn&amp;#8217;t matter what the test is going to assert after this, so we don&amp;#8217;t need to worry about all of our tests&amp;#8217; wait logic breaking if we change the application&amp;#8217;s behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, we&amp;#8217;re back to the convenience of Web 1.0 applications&amp;#8211;we have an automatic, reliable way of keeping the browser and test in sync with each other.&lt;/p&gt;

&lt;h2 id='page_objects'&gt;Page Objects&lt;/h2&gt;

&lt;p&gt;So, that&amp;#8217;s the core of the approach. I think this just by itself will work quite well and, in my opinion, better than pre-assertion/per-assertion waiting approaches.&lt;/p&gt;

&lt;p&gt;However, I&amp;#8217;ve also been going one step further and, with my &lt;a href='https://github.com/stephenh/pageobjects'&gt;pageobjects&lt;/a&gt; implementation, centralizing the waiting declarations within the page objects themselves. So, I might have:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;// each page/fragment in the app has an XxxPage class
class EmployeePage extends AbstractPageObject {
  // each element on the page has a field of XxxObject
  public TextBoxObect name = new TextBoxObect(&amp;quot;employeeName&amp;quot;);

  // fluently add `outstanding` to submit
  public ButtonObject submit = new ButtonObject(&amp;quot;submit&amp;quot;)
    .afterClickWaitFor(outstanding());

  // cstr, other fields...
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;afterClickWaitFor&lt;/code&gt; means there is just &lt;em&gt;one place&lt;/em&gt; in all of the functional tests that says &amp;#8220;after this button is clicked, we will probably have to wait for the server&amp;#8221;.&lt;/p&gt;

&lt;p&gt;So the test can now look even simpler, with no mention of waiting:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;employeePage.submit.click();
assertErrorIs(...);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you&amp;#8217;re extra spiffy, you might even encapsulate the error gathering logic into the &lt;code&gt;EmployeePage&lt;/code&gt; as well, so then you&amp;#8217;re test is:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;employeePage.submit.click();
assertThat(employeePage.getErrors(), contains(&amp;quot;...&amp;quot;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To me, this is a pretty nice test to read. No explicit waiting, pretty high level (the ids/lookup logic are encapsulated in the page objects). It&amp;#8217;s probably not as flowing as a &lt;a href='http://www.growing-object-oriented-software.com/'&gt;GooS&lt;/a&gt;-style functional tests, which are awesome, but personally I find this level of abstraction to be a sweet spot in the trade off between effort and benefit.&lt;/p&gt;

&lt;h2 id='disclaimer'&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;The one large disclaimer to this approach is that I haven&amp;#8217;t had to deal with a lot of animation&amp;#8211;all of my waiting really is on the server, and then things in the UI are generally displayed right away (within the same event loop that services the AJAX response).&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re doing anything with &lt;code&gt;setTimeout&lt;/code&gt;, e.g. animation or progressive calculations, then you&amp;#8217;ll probably have to fall back to pre-assertion waiting. Although hopefully you could find a wait to encapsulate it into a page object, perhaps some sort of &lt;code&gt;beforeAssertionWaitFor&lt;/code&gt; method (which doesn&amp;#8217;t exist yet).&lt;/p&gt;

&lt;p&gt;Anyway, that disclaimer aside, I&amp;#8217;ve found this approach to be very successful. My last few projects have had much more most robust Selenium tests than previous ones (that doesn&amp;#8217;t mean perfect; but definitely much better). Part of that is likely due to the kick ass job the Selenium developers are doing, but I think the outstanding + post-action waiting approach has a large part to do with it as well.&lt;/p&gt;

&lt;p&gt;If you try it out, I hope you find it useful. Feel free to download &lt;a href='https://github.com/stephenh/pageobjects'&gt;pageobjects&lt;/a&gt;, play around, and drop me an email/Github message if you run in to anything.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why No One Uses Scala's Structural Typing</title>
   <link href="http://draconianoverlord.com/2011/10/04/why-no-one-uses-scala-structural-typing.html"/>
   <updated>2011-10-04T00:00:00-05:00</updated>
   <id>http://draconianoverlord.com/2011/10/04/why-no-one-uses-scala-structural-typing</id>
   <content type="html">&lt;h1 id='why_no_one_uses_scalas_structural_typing'&gt;Why No One Uses Scala&amp;#8217;s Structural Typing&lt;/h1&gt;

&lt;p&gt;Recently I heard some Scala enthusiasts note that, anecdotally, not very many projects actually use Scala&amp;#8217;s structural typing support.&lt;/p&gt;

&lt;p&gt;In the subset of the Scala library that &lt;a href='http://scalagwt.github.com/'&gt;scalagwt&lt;/a&gt; supports (which is most of it), structural typing was only used once, and that turned out to be a &lt;a href='https://issues.scala-lang.org/browse/SI-4791'&gt;bug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why is this? Aren&amp;#8217;t structural types supposed to be awesome? The safety of static type checking, without the annoyance of manually adapting types?&lt;/p&gt;

&lt;p&gt;To me, the reason is fairly obvious: Scala&amp;#8217;s structural types are implemented on the declaration-side.&lt;/p&gt;

&lt;p&gt;This means that, when declaring a method, you decide then whether or not &lt;em&gt;all&lt;/em&gt; callers will use regular or structural typing. For example:&lt;/p&gt;

&lt;pre class='brush:scala'&gt;&lt;code&gt;class SomeApi {
  // regular typing method, takes Foo, callers
  // can only pass a Foo, normal typing
  def regularMethod(foo: Foo) {
    // regular dispatching
    foo.doFoo()
  }

  // structural typing method, callers can pass
  // any type that has a &amp;quot;doFoo&amp;quot; method
  def structuralMethod(foo: { def doFoo(): Unit }) {
    // structural dispatching (reflection)
    foo.doFoo()
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, so what?&lt;/p&gt;

&lt;p&gt;To think about this, let&amp;#8217;s introduce two developers: the API designer and the API user:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The API designer codes &lt;code&gt;someMethod&lt;/code&gt; and decides regular vs. structural typing.&lt;/li&gt;

&lt;li&gt;The API user calls &lt;code&gt;someMethod&lt;/code&gt; and has to go with whatever the designer chose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now think, who needs structural typing?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The API designer does not need structural typing&amp;#8211;he, by virtue of being the designer, controls the API and related codebase. If he needs &lt;code&gt;someMethod&lt;/code&gt; to accept two separate types, he very likely controls each type, or at least controls &lt;code&gt;someMethod&lt;/code&gt;, so, most of the time, can make his scenario work with regular types (having &lt;code&gt;TypeA&lt;/code&gt; also extend &lt;code&gt;TypeB&lt;/code&gt; or vice versa).&lt;/p&gt;

&lt;p&gt;(Besides API designers, I think this also covers a programmer making any calls internally within a codebase&amp;#8211;you just change the types of the methods/arguments to match what you&amp;#8217;re trying to do with normal typing rules.)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The API user &lt;em&gt;does&lt;/em&gt; need structural typing&amp;#8211;not being in control of the API, he is most likely to have types that wouldn&amp;#8217;t satisfy &lt;code&gt;someMethod&lt;/code&gt; using normal typing, but would with structural typing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there&amp;#8217;s the rub: structural typing&amp;#8217;s forte, in my opinion, is calling APIs you don&amp;#8217;t control; but that same lack of control means, in Scala, you won&amp;#8217;t be able to actually use it.&lt;/p&gt;

&lt;p&gt;Think of the API designer: it&amp;#8217;s unlikely they&amp;#8217;ll anticipate when API users will/will not want to use structural typing. And it&amp;#8217;s unlikely that API designers will use structural typing for the &lt;em&gt;entire&lt;/em&gt; API, just in case. So, in practice, it&amp;#8217;s used for none.&lt;/p&gt;

&lt;p&gt;So, what of structural typing then? Is it all for naught?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not sure. Previously, I mulled about how some languages do &lt;a href='http://draconianoverlord.com/2010/01/17/caller-side-structural-typing.html'&gt;Caller-Side Structural Typing&lt;/a&gt;, which moves the decision of &amp;#8220;do I use structural typing here?&amp;#8221; to the caller side, where I think it&amp;#8217;s much more likely to be used. E.g. &lt;a href='http://code.google.com/p/heron-language'&gt;Heron&lt;/a&gt;&amp;#8217;s &lt;a href='http://drdobbs.com/blogs/architecture-and-design/228701413'&gt;&lt;code&gt;as&lt;/code&gt; keyword&lt;/a&gt;:&lt;/p&gt;

&lt;pre class='brush:java'&gt;&lt;code&gt;interface Foo {
  doFoo();
}

// doesn&amp;#39;t implement Foo
class LikeFoo {
  void doFoo() { ... }
}

// as generates a delegate that
// implements Foo for LikeFoo
takesFoo(new LikeFoo() as Foo);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, these approaches (on a pre-&lt;a href='http://openjdk.java.net/projects/mlvm/subprojects.html#InterfaceInjection'&gt;interface-injection&lt;/a&gt; JVM anyway), usually just end up as the compiler/JVM auto-writing the adaptor for you (and can only be used for interfaces). Which is cool, but may/may not be structural typing anymore.&lt;/p&gt;

&lt;p&gt;A colleague pointed out that Scala&amp;#8217;s structural typing actually came about serendipitously, as a side effect of simplifying the Scala language spec (from &lt;a href='http://www.infoq.com/interviews/martin-odersky-scala-future'&gt;this interview&lt;/a&gt; with Martin Odersky). I&amp;#8217;m not an expert on the OO types vs. functional modules aspect Martin was talking about. But since my personal use case of &amp;#8220;calling APIs you don&amp;#8217;t control&amp;#8221; doesn&amp;#8217;t seem to be what Scala&amp;#8217;s structural typing was introduced for, it makes sense that it doesn&amp;#8217;t solve it very well.&lt;/p&gt;

&lt;p&gt;My suspicion is that structural types may just never be a big hit on the JVM, due to the assumptions it makes about types being non-structural. Unless &lt;code&gt;invokedynamic&lt;/code&gt; magic makes it possible; I have no idea. And I don&amp;#8217;t have enough experience with a non-JVM/true structural language like Go to really comment any further, so I&amp;#8217;ll leave it at that.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure others have more insightful thoughts on this; if so, please leave them, or links to them, in the comments.&lt;/p&gt;</content>
 </entry>
 
 
</feed>
